<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTML相关问题-03</title>
      <link href="/61542.html"/>
      <url>/61542.html</url>
      
        <content type="html"><![CDATA[<h2 id="webSocket-如何兼容低版本浏览器？"><a href="#webSocket-如何兼容低版本浏览器？" class="headerlink" title="webSocket 如何兼容低版本浏览器？"></a>webSocket 如何兼容低版本浏览器？</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Adobe Flash Socket 、</span><br><span class="line">ActiveX HTMLFile (IE) 、</span><br><span class="line">基于 multipart 编码发送 XHR 、</span><br><span class="line">基于长轮询的 XHR</span><br></pre></td></tr></table></figure><h2 id="页面可见性（Page-Visibility-API）-可以有哪些用途？"><a href="#页面可见性（Page-Visibility-API）-可以有哪些用途？" class="headerlink" title="页面可见性（Page Visibility API） 可以有哪些用途？"></a>页面可见性（Page Visibility API） 可以有哪些用途？</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">这个新的 API 的意义在于，通过监听网页的可见性，可以预判网页的卸载，还可以用来节省资源，减缓电能的消耗。比如，一旦用户</span><br><span class="line">不看网页，下面这些网页行为都是可以暂停的。</span><br><span class="line"></span><br><span class="line">（1）对服务器的轮询</span><br><span class="line">（2）网页动画</span><br><span class="line">（3）正在播放的音频或视频</span><br></pre></td></tr></table></figure><p>   详细资料可以参考：<br>   <a href="http://www.ruanyifeng.com/blog/2018/10/page_visibility_api.html">《Page Visibility API 教程》</a></p><h2 id="如何在页面上实现一个圆形的可点击区域？"><a href="#如何在页面上实现一个圆形的可点击区域？" class="headerlink" title="如何在页面上实现一个圆形的可点击区域？"></a>如何在页面上实现一个圆形的可点击区域？</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">（1）纯 html 实现，使用 &lt;area&gt; 来给 &lt;img&gt; 图像标记热点区域的方式，&lt;map&gt; 标签用来定义一个客户端图像映射，&lt;area&gt; </span><br><span class="line">    标签用来定义图像映射中的区域，area 元素永远嵌套在 map 元素内部，我们可以将 area 区域设置为圆形，从而实现可点击</span><br><span class="line">    的圆形区域。</span><br><span class="line"></span><br><span class="line">（2）纯 css 实现，使用 border-radius ，当 border-radius 的长度等于宽高相等的元素值的一半时，即可实现一个圆形的</span><br><span class="line">    点击区域。</span><br><span class="line"></span><br><span class="line">（3）纯 js 实现，判断一个点在不在圆上的简单算法，通过监听文档的点击事件，获取每次点击时鼠标的位置，判断该位置是否在我</span><br><span class="line">    们规定的圆形区域内。</span><br></pre></td></tr></table></figure><p>   详细资料可以参考：<br>   <a href="https://maizi93.github.io/2017/08/29/%E5%A6%82%E4%BD%95%E5%9C%A8%E9%A1%B5%E9%9D%A2%E4%B8%8A%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9C%86%E5%BD%A2%E7%9A%84%E5%8F%AF%E7%82%B9%E5%87%BB%E5%8C%BA%E5%9F%9F%EF%BC%9F/">《如何在页面上实现一个圆形的可点击区域？》</a><br>   <a href="https://www.zhangxinxu.com/wordpress/2017/05/html-area-map/">《HTML <area><map> 标签及在实际开发中的应用》</a></p><h2 id="实现不使用-border-画出-1-px-高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果。"><a href="#实现不使用-border-画出-1-px-高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果。" class="headerlink" title="实现不使用 border 画出 1 px 高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果。"></a>实现不使用 border 画出 1 px 高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果。</h2>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height:1px;overflow:hidden;background:red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="title-与-h1-的区别？"><a href="#title-与-h1-的区别？" class="headerlink" title="title 与 h1 的区别？"></a>title 与 h1 的区别？</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title 属性没有明确意义只表示是个标题，h1 则表示层次明确的标题，对页面信息的抓取也有很大的影响。</span><br></pre></td></tr></table></figure><h2 id="lt-img-gt-的-title-和-alt-有什么区别？"><a href="#lt-img-gt-的-title-和-alt-有什么区别？" class="headerlink" title="&lt;img&gt; 的 title 和 alt 有什么区别？"></a><code>&lt;img&gt;</code> 的 title 和 alt 有什么区别？</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title 通常当鼠标滑动到元素上的时候显示</span><br><span class="line"></span><br><span class="line">alt 是 &lt;img&gt; 的特有属性，是图片内容的等价描述，用于图片无法加载时显示、读屏器阅读图片。可提图片高可访问性，除了纯装</span><br><span class="line">饰图片外都必须设置有意义的值，搜索引擎会重点分析。</span><br></pre></td></tr></table></figure><h2 id="Canvas-和-SVG-有什么区别？"><a href="#Canvas-和-SVG-有什么区别？" class="headerlink" title="Canvas 和 SVG 有什么区别？"></a>Canvas 和 SVG 有什么区别？</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Canvas 是一种通过 JavaScript 来绘制 2D 图形的方法。Canvas 是逐像素来进行渲染的，因此当我们对 Canvas 进行缩放时，</span><br><span class="line">会出现锯齿或者失真的情况。</span><br><span class="line"></span><br><span class="line">SVG 是一种使用 XML 描述 2D 图形的语言。SVG 基于 XML，这意味着 SVG DOM 中的每个元素都是可用的。我们可以为某个元素</span><br><span class="line">附加 JavaScript 事件监听函数。并且 SVG 保存的是图形的绘制方法，因此当 SVG 图形缩放时并不会失真。</span><br></pre></td></tr></table></figure><p>   详细资料可以参考：<br>   <a href="https://www.zhihu.com/question/19690014">《SVG 与 HTML5 的 canvas 各有什么优点，哪个更有前途？》</a></p><h2 id="网页验证码是干嘛的，是为了解决什么安全问题？"><a href="#网页验证码是干嘛的，是为了解决什么安全问题？" class="headerlink" title="网页验证码是干嘛的，是为了解决什么安全问题？"></a>网页验证码是干嘛的，是为了解决什么安全问题？</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    （1）区分用户是计算机还是人的公共全自动程序。可以防止恶意破解密码、刷票、论坛灌水</span><br><span class="line">    （2）有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试</span><br><span class="line">   ```  </span><br><span class="line"></span><br><span class="line">## 渐进增强和优雅降级的定义</span><br></pre></td></tr></table></figure><pre><code>渐进增强：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的        用户体验。优雅降级：一开始就根据高版本浏览器构建完整的功能，然后再针对低版本浏览器进行兼容。</code></pre>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line">## attribute 和 property 的区别是什么？</span><br></pre></td></tr></table></figure><pre><code>attribute 是 dom 元素在文档中作为 html 标签拥有的属性；property 就是 dom 元素在 js 中作为对象拥有的属性。对于 html 的标准属性来说，attribute 和 property 是同步的，是会自动更新的，但是对于自定义的属性来说，他们是不同步的。</code></pre>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 对 web 标准、可用性、可访问性的理解</span><br></pre></td></tr></table></figure><pre><code>可用性（Usability）：产品是否容易上手，用户能否完成任务，效率如何，以及这过程中用户的主观感受可好，是从用户的角度来看产品的质量。可用性好意味着产品质量高，是企业的核心竞争力可访问性（Accessibility）：Web 内容对于残障用户的可阅读和可理解性可维护性（Maintainability）：一般包含两个层次，一是当系统出现问题时，快速定位并解决问题的成本，成本低则可维护性好。二是代码是否容易被人理解，是否容易修改和增强功能。</code></pre>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## IE 各版本和 Chrome 可以并行下载多少个资源？</span><br></pre></td></tr></table></figure><pre><code>（1）  IE6 2 个并发（2）  iE7 升级之后的 6 个并发，之后版本也是 6 个（3）  Firefox，chrome 也是6个</code></pre>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## Flash、Ajax 各自的优缺点，在使用中如何取舍？</span><br></pre></td></tr></table></figure><pre><code>Flash：（1） Flash 适合处理多媒体、矢量图形、访问机器（2） 对 CSS、处理文本上不足，不容易被搜索Ajax：（1） Ajax 对 CSS、文本支持很好，支持搜索（2） 多媒体、矢量图形、机器访问不足共同点：（1） 与服务器的无刷新传递消息（2） 可以检测用户离线和在线状态（3） 操作 DOM</code></pre>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 怎么重构页面？</span><br></pre></td></tr></table></figure><pre><code>（1） 编写 CSS（2） 让页面结构更合理化，提升用户体验（3） 实现良好的页面效果和提升性能</code></pre>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 浏览器架构</span><br></pre></td></tr></table></figure><pre><code>* 用户界面  * 主进程  * 内核      * 渲染引擎      * JS 引擎          * 执行栈      * 事件触发线程          * 消息队列              * 微任务              * 宏任务      * 网络异步线程      * 定时器线程</code></pre>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 常用的 meta 标签</span><br></pre></td></tr></table></figure><pre><code>&lt;meta&gt; 元素可提供有关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。&lt;meta&gt; 标签位于文档的头部，不包含任何内容。&lt;meta&gt; 标签的属性定义了与文档相关联的名称/值对。&lt;!DOCTYPE html&gt;  H5标准声明，使用 HTML5 doctype，不区分大小写&lt;head lang=&quot;en&quot;&gt; 标准的 lang 属性写法&lt;meta charset=&quot;utf-8&quot;&gt;    声明文档使用的字符编码&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;/&gt;   优先使用 IE 最新版本和 Chrome&lt;meta name=&quot;description&quot; content=&quot;不超过150个字符&quot;/&gt;       页面描述&lt;meta name=&quot;keywords&quot; content=&quot;&quot;/&gt;      页面关键词者&lt;meta name=&quot;author&quot; content=&quot;name, email@gmail.com&quot;/&gt;    网页作&lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt;      搜索引擎抓取&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no&quot;&gt; 为移动设备添加 viewport&lt;meta name=&quot;apple-mobile-web-app-title&quot; content=&quot;标题&quot;&gt; iOS 设备 begin&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;/&gt;  添加到主屏后的标题（iOS 6 新增）是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏&lt;meta name=&quot;apple-itunes-app&quot; content=&quot;app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL&quot;&gt;添加智能 App 广告条 Smart App Banner（iOS 6+ Safari）&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot;/&gt;&lt;meta name=&quot;format-detection&quot; content=&quot;telphone=no, email=no&quot;/&gt;  设置苹果工具栏颜色&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;  启用360浏览器的极速模式(webkit)&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;     避免IE使用兼容模式&lt;meta http-equiv=&quot;Cache-Control&quot; content=&quot;no-siteapp&quot; /&gt;    不让百度转码&lt;meta name=&quot;HandheldFriendly&quot; content=&quot;true&quot;&gt;     针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓&lt;meta name=&quot;MobileOptimized&quot; content=&quot;320&quot;&gt;   微软的老式浏览器&lt;meta name=&quot;screen-orientation&quot; content=&quot;portrait&quot;&gt;   uc强制竖屏&lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot;&gt;    QQ强制竖屏&lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot;&gt;              UC强制全屏&lt;meta name=&quot;x5-fullscreen&quot; content=&quot;true&quot;&gt;       QQ强制全屏&lt;meta name=&quot;browsermode&quot; content=&quot;application&quot;&gt;   UC应用模式&lt;meta name=&quot;x5-page-mode&quot; content=&quot;app&quot;&gt;    QQ应用模式&lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;&gt;    windows phone 点击无高光设置页面不缓存&lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&gt;&lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&gt;&lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot;&gt;</code></pre>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   详细资料可以参考：</span><br><span class="line">   [《Meta 标签用法大全》](http://www.cnblogs.com/qiumohanyu/p/5431859.html)</span><br><span class="line"></span><br><span class="line">## css reset 和 normalize.css 有什么区别？</span><br><span class="line">    </span><br><span class="line">   相关知识点：</span><br></pre></td></tr></table></figure><pre><code>为什么会有 CSS Reset 的存在呢？那是因为早期的浏览器支持和理解的 CSS 规范不同，导致渲染页面时效果不一致，会出现很多兼容性问题。reset 的目的，是将所有的浏览器的自带样式重置掉，这样更易于保持各浏览器渲染的一致性。normalize 的理念则是尽量保留浏览器的默认样式，不进行太多的重置，而尽力让这些样式保持一致并尽可能与现代标准相符合。1.Normalize.css 保护了有价值的默认值Reset 通过为几乎所有的元素施加默认样式，强行使得元素有相同的视觉效果。 相比之下，Normalize.css 保持了许多默认的浏览器样式。 这就意味着你不用再为所有公共的排版元素重新设置样式。 当一个元素在不同的浏览器中有不同的默认值时，Normalize.css 会力求让这些样式保持一致并尽可能与现代标准相符合。2.Normalize.css 修复了浏览器的 bug它修复了常见的桌面端和移动端浏览器的 bug。这往往超出了 Reset 所能做到的范畴。关于这一点，Normalize.css 修复的问题包含了 HTML5 元素的显示设置、预格式化文字的 font-size 问题、在 IE9 中 SVG 的溢出、许多出现在各浏览器和操作系统中的与表单相关的 bug。3.Normalize.css 没有复杂的继承链使用 Reset 最让人困扰的地方莫过于在浏览器调试工具中大段大段的继承链。在 Normalize.css 中就不会有这样的问题，因为在我们的准则中对多选择器的使用时非常谨慎的，我们仅会有目的地对目标元素设置样式。4.Normalize.css 是模块化的这个项目已经被拆分为多个相关却又独立的部分，这使得你能够很容易也很清楚地知道哪些元素被设置了特定的值。因此这能让你自己选择性地移除掉某些永远不会用到部分（比如表单的一般化）。5.Normalize.css 拥有详细的文档Normalize.css 的代码基于详细而全面的跨浏览器研究与测试。这个文件中拥有详细的代码说明并在 Github Wiki 中有进一步的说明。这意味着你可以找到每一行代码具体完成了什么工作、为什么要写这句代码、浏览器之间的差异，并且你可以更容易地进行自己的测试。</code></pre>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">回答：</span><br></pre></td></tr></table></figure><pre><code>css reset 是最早的一种解决浏览器间样式不兼容问题的方案，它的基本思想是将浏览器的所有样式都重置掉，从而达到所有浏览器样式保持一致的效果。但是使用这种方法，可能会带来一些性能上的问题，并且对于一些元素的不必要的样式的重置，其实反而会造成画蛇添足的效果。后面出现一种更好的解决浏览器间样式不兼容的方法，就是 normalize.css ，它的思想是尽量的保留浏览器自带的样式，通过在原有的样式的基础上进行调整，来保持各个浏览器间的样式表现一致。相对与 css reset，normalize.css 的方法保留了有价值的默认值，并且修复了一些浏览器的 bug，而且使用 normalize.css 不会造成元素复杂的继承链。</code></pre>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   详细资料可以参考：</span><br><span class="line">   [《关于CSS Reset 那些事（一）之 历史演变与 Normalize.css》](https://segmentfault.com/a/1190000003021766#articleHeader0)</span><br><span class="line">   [《Normalize.css 和 Reset CSS 有什么本质区别没？》](https://segmentfault.com/q/1010000000117189)</span><br><span class="line"></span><br><span class="line">## 用于预格式化文本的标签是？</span><br></pre></td></tr></table></figure><pre><code>预格式化就是保留文字在源码中的格式 最后显示出来样式与源码中的样式一致 所见即所得。&lt;pre&gt; 定义预格式文本，保持文本原有的格式</code></pre>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## DHTML 是什么？</span><br></pre></td></tr></table></figure><pre><code>DHTML 将 HTML、JavaScript、DOM 以及 CSS 组合在一起，用于创造动态性更强的网页。通过 JavaScript 和 HTML DOM，能够动态地改变 HTML 元素的样式。DHTML 实现了网页从 Web 服务器下载后无需再经过服务的处理，而在浏览器中直接动态地更新网页的内容、排版样式和动画的功能。例如，当鼠标指针移到文章段落中时，段落能够变成蓝色，或者当鼠标指针移到一个超级链接上时，会自动生成一个下拉式子链接目录等。包括：（1）动态内容（Dynamic Content）：动态地更新网页内容，可“动态”地插入、修改或删除网页的元件，如文字、图像、标记等。（2）动态排版样式（Dynamic Style Sheets）：W3C 的 CSS 样式表提供了设定 HTML 标记的字体大小、字形、样式、粗细、    文字颜色、行高度、加底线或加中间横线、缩排、与边缘距离、靠左右或置中、背景图片或颜色等排版功能，而“动态排版样    式”即可以“动态”地改变排版样式。</code></pre>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## head 标签中必不少的是？</span><br></pre></td></tr></table></figure><pre><code>&lt;head&gt; 标签用于定义文档的头部，它是所有头部元素的容器。&lt;head&gt; 中的元素可以引用脚本、指示浏览器在哪里找到样式表、提供元信息等等。文档的头部描述了文档的各种属性和信息，包括文档的标题、在 Web 中的位置以及和其他文档的关系等。绝大多数文档头部包含的数据都不会真正作为内容显示给读者。下面这些标签可用在 head 部分：&lt;base&gt;, &lt;link&gt;, &lt;meta&gt;, &lt;script&gt;, &lt;style&gt;, 以及 &lt;title&gt;。&lt;title&gt; 定义文档的标题，它是 head 部分中唯一必需的元素。</code></pre>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## HTML5 新增的表单元素有？</span><br></pre></td></tr></table></figure><pre><code>datalist 规定输入域的选项列表，通过 option 创建！ keygen 提供一种验证用户的可靠方法，密钥对生成器，私钥存于客户端，公钥发到服务器，用于之后验证客户端证书！output 元素用于不同类型的输出！</code></pre>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 在 HTML5 中，哪个方法用于获得用户的当前位置？</span><br></pre></td></tr></table></figure><pre><code>getCurrentPosition()</code></pre>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 文档的不同注释方式？</span><br></pre></td></tr></table></figure><pre><code>HTML 的注释方法 &lt;!--注释内容--&gt; CSS 的��释方法 /*注释内容*/ JavaScript 的注释方法 /* 多行注释方式 */ //单行注释方式</code></pre>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## disabled 和 readonly 的区别？</span><br></pre></td></tr></table></figure><pre><code>disabled 指当 input 元素加载时禁用此元素。input 内容不会随着表单提交。 readonly 规定输入字段为只读。input 内容会随着表单提交。无论设置 readonly 还是 disabled，通过 js 脚本都能更改 input 的 value</code></pre>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 主流浏览器内核私有属性 css 前缀？</span><br></pre></td></tr></table></figure><pre><code>mozilla 内核 （firefox,flock 等）    -mozwebkit  内核 （safari,chrome 等）   -webkitopera   内核 （opera 浏览器）        -otrident 内核 （ie 浏览器）           -ms</code></pre>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 前端性能优化？</span><br></pre></td></tr></table></figure><pre><code>前端性能优化主要是为了提高页面的加载速度，优化用户的访问体验。我认为可以从这些方面来进行优化。第一个方面是页面的内容方面（1）通过文件合并、css 雪碧图、使用 base64 等方式来减少 HTTP 请求数，避免过多的请求造成等待的情况。（2）通过 DNS 缓存等机制来减少 DNS 的查询次数。（3）通过设置缓存策略，对常用不变的资源进行缓存。（4）使用延迟加载的方式，来减少页面首屏加载时需要请求的资源。延迟加载的资源当用户需要访问时，再去请求加载。（5）通过用户行为，对某些资源使用预加载的方式，来提高用户需要访问资源时的响应速度。第二个方面是服务器方面（1）使用 CDN 服务，来提高用户对于资源请求时的响应速度。（2）服务器端启用 Gzip、Deflate 等方式对于传输的资源进行压缩，减小文件的体积。（3）尽可能减小 cookie 的大小，并且通过将静态资源分配到其他域名下，来避免对静态资源请求时携带不必要的 cookie第三个方面是 CSS 和 JavaScript 方面（1）把样式表放在页面的 head 标签中，减少页面的首次渲染的时间。（2）避免使用 @import 标签。（3）尽量把 js 脚本放在页面底部或者使用 defer 或 async 属性，避免脚本的加载和执行阻塞页面的渲染。（4）通过对 JavaScript 和 CSS 的文件进行压缩，来减小文件的体积。</code></pre>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   详细的资料可以参考：</span><br><span class="line">   [《前端性能优化之雅虎35条军规》](https://juejin.im/post/5b73ef38f265da281e048e51#heading-10)</span><br><span class="line">   [《你真的了解 gzip 吗？》](https://juejin.im/entry/58709b9a128fe1006b29cd5d)</span><br><span class="line">   [《前端性能优化之 gzip》](https://segmentfault.com/a/1190000012571492)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Chrome 中的 Waterfall ？</span><br><span class="line">   详细资料可以参考：</span><br><span class="line">   [《前端性能之 Chrome 的 Waterfall》](https://blog.csdn.net/carian_violet/article/details/84954360)</span><br><span class="line">   [《教你读懂网络请求的瀑布图》](https://blog.csdn.net/csdn_girl/article/details/54911632)    [《前端妹子跟我抱怨她们的页面加载很慢的时候，如何在她面前优雅地装逼？》](https://www.zhihu.com/question/27085552/answer/35194131)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 扫描二维码登录网页是什么原理，前后两个事件是如何联系的？</span><br></pre></td></tr></table></figure><pre><code>核心过程应该是：浏览器获得一个临时 id，通过长连接等待客户端扫描带有此 id 的二维码后，从长连接中获得客户端上报给 server的帐号信息进行展示。并在客户端点击确认后，获得服务器授信的令牌，进行随后的信息交互过程。在超时、网络断开、其他设备上登录后，此前获得的令牌或丢失、或失效，对授权过程形成有效的安全防护。我的理解二维码登录网页的基本原理是，用户进入登录网页后，服务器生成一个 uid 来标识一个用户。对应的二维码对应了一个对应 uid 的链接，任何能够识别二维码的应用都可以获得这个链接，但是它们没有办法和对应登录的服务器响应。比如微信的二维码登录，只有用微信识这个二维码才有效。当微信客户端打开这个链接时，对应的登录服务器就获得了用户的相关信息。这个时候登录网页根据先前的长连接获取到服务器传过来的用户信息进行显示。然后提前预加载一些登录后可能用到的信息。当客户端点击确认授权登陆后，服务器生成一个权限令牌给网页，网页之后使用这个令牌进行信息的交互过程。由于整个授权的过程都是在手机端进行的，因此能够很好的防止 PC 上泛滥的病毒。并且在超时、网络断开、其他设备上登录后，此前获得的令牌或丢失、或失效，对授权过程能够形成有效的安全防护。</code></pre>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   详细资料可以参考：</span><br><span class="line">   [《微信扫描二维码登录网页》](https://www.zhihu.com/question/20368066)</span><br><span class="line"></span><br><span class="line">## Html 规范中为什么要求引用资源不加协议头`http`或者`https`？</span><br></pre></td></tr></table></figure><pre><code>如果用户当前访问的页面是通过 HTTPS 协议来浏览的，那么网页中的资源也只能通过 HTTPS 协议来引用，否则浏览器会出现警告信息，不同浏览器警告信息展现形式不同。为了解决这个问题，我们可以省略 URL 的协议声明，省略后浏览器照样可以正常引用相应的资源，这项解决方案称为 protocol-relative URL，暂且可译作协议相对 URL。如果使用协议相对 URL，无论是使用 HTTPS，还是 HTTP 访问页面，浏览器都会以相同的协议请求页面中的资源，避免弹出类似的警告信息，同时还可以节省5字节的数据量。</code></pre><pre><code>详细资料可以参考：[《协议相对 URL》](https://www.ludou.org/the-protocol-relative-url.html)[《Why you need protocol-relative URLs *now*》](https://www.tuicool.com/articles/nEjU7b)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端面试 </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 前端面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML相关问题-02</title>
      <link href="/12455.html"/>
      <url>/12455.html</url>
      
        <content type="html"><![CDATA[<h2 id="CSS-如何阻塞文档解析？（浏览器解析过程）"><a href="#CSS-如何阻塞文档解析？（浏览器解析过程）" class="headerlink" title="CSS 如何阻塞文档解析？（浏览器解析过程）"></a>CSS 如何阻塞文档解析？（浏览器解析过程）</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">理论上，既然样式表不改变 DOM 树，也就没有必要停下文档的解析等待它们，然而，存在一个问题，JavaScript 脚本执行时可</span><br><span class="line">能在文档的解析过程中请求样式信息，如果样式还没有加载和解析，脚本将得到错误的值，显然这将会导致很多问题。</span><br><span class="line"></span><br><span class="line">所以如果浏览器尚未完成 CSSOM 的下载和构建，而我们却想在此时运行脚本，那么浏览器将延迟 JavaScript 脚本执行和文档</span><br><span class="line">的解析，直至其完成 CSSOM 的下载和构建。也就是说，在这种情况下，浏览器会先下载和构建 CSSOM，然后再执行 JavaScript，</span><br><span class="line">最后再继续文档的解析。</span><br></pre></td></tr></table></figure><h2 id="渲染页面时常见哪些不良现象？（浏览器渲染过程）"><a href="#渲染页面时常见哪些不良现象？（浏览器渲染过程）" class="headerlink" title="渲染页面时常见哪些不良现象？（浏览器渲染过程）"></a>渲染页面时常见哪些不良现象？（浏览器渲染过程）</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FOUC：主要指的是样式闪烁的问题，由于浏览器渲染机制（比如firefox），在 CSS 加载之前，先呈现了 HTML，就会导致展示</span><br><span class="line">      出无样式内容，然后样式突然呈现的现象。会出现这个问题的原因主要是 css 加载时间过长，或者 css 被放在了文档底</span><br><span class="line">      部。</span><br><span class="line"></span><br><span class="line">白屏：有些浏览器渲染机制（比如chrome）要先构建 DOM 树和 CSSOM 树，构建完成后再进行渲染，如果 CSS 部分放在 HTML </span><br><span class="line">     尾部，由于 CSS 未加载完成，浏览器迟迟未渲染，从而导致白屏；也可能是把 js 文件放在头部，脚本的加载会阻塞后面</span><br><span class="line">     文档内容的解析，从而页面迟迟未渲染出来，出现白屏问题。</span><br></pre></td></tr></table></figure><p>   详细资料可以参考：<br>    <a href="https://juejin.im/entry/58f867045c497d0058e2ff3a">《前端魔法堂：解秘 FOUC》</a><br>    <a href="https://www.jianshu.com/p/6617efa874b0">《白屏问题和 FOUC》</a></p><h2 id="如何优化关键渲染路径？（浏览器渲染过程）"><a href="#如何优化关键渲染路径？（浏览器渲染过程）" class="headerlink" title="如何优化关键渲染路径？（浏览器渲染过程）"></a>如何优化关键渲染路径？（浏览器渲染过程）</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">为尽快完成首次渲染，我们需要最大限度减小以下三种可变因素：</span><br><span class="line"></span><br><span class="line">（1）关键资源的数量。</span><br><span class="line">（2）关键路径长度。</span><br><span class="line">（3）关键字节的数量。</span><br><span class="line"></span><br><span class="line">关键资源是可能阻止网页首次渲染的资源。这些资源越少，浏览器的工作量就越小，对 CPU 以及其他资源的占用也就越少。</span><br><span class="line"></span><br><span class="line">同样，关键路径长度受所有关键资源与其字节大小之间依赖关系图的影响：某些资源只能在上一资源处理完毕之后才能开始下载，</span><br><span class="line">并且资源越大，下载所需的往返次数就越多。</span><br><span class="line"></span><br><span class="line">最后，浏览器需要下载的关键字节越少，处理内容并让其出现在屏幕上的速度就越快。要减少字节数，我们可以减少资源数（将它</span><br><span class="line">们删除或设为非关键资源），此外还要压缩和优化各项资源，确保最大限度减小传送大小。</span><br><span class="line"></span><br><span class="line">优化关键渲染路径的常规步骤如下：</span><br><span class="line"></span><br><span class="line">（1）对关键路径进行分析和特性描述：资源数、字节数、长度。</span><br><span class="line">（2）最大限度减少关键资源的数量：删除它们，延迟它们的下载，将它们标记为异步等。</span><br><span class="line">（3）优化关键字节数以缩短下载时间（往返次数）。</span><br><span class="line">（4）优化其余关键资源的加载顺序：您需要尽早下载所有关键资产，以缩短关键路径长度。</span><br></pre></td></tr></table></figure><p>   详细资料可以参考：<br>   <a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/optimizing-critical-rendering-path?hl=zh-cn">《优化关键渲染路径》</a></p><h2 id="什么是重绘和回流？（浏览器绘制过程）"><a href="#什么是重绘和回流？（浏览器绘制过程）" class="headerlink" title="什么是重绘和回流？（浏览器绘制过程）"></a>什么是重绘和回流？（浏览器绘制过程）</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">重绘: 当渲染树中的一些元素需要更新属性，而这些属性只是影响元素的外观、风格，而不会影响布局的操作，比如 background</span><br><span class="line">      -color，我们将这样的操作称为重绘。</span><br><span class="line"></span><br><span class="line">回流：当渲染树中的一部分（或全部）因为元素的规模尺寸、布局、隐藏等改变而需要重新构建的操作，会影响到布局的操作，这样</span><br><span class="line">     的操作我们称为回流。</span><br><span class="line"></span><br><span class="line">常见引起回流属性和方法：</span><br><span class="line"></span><br><span class="line">任何会改变元素几何信息（元素的位置和尺寸大小）的操作，都会触发回流。</span><br><span class="line"></span><br><span class="line">（1）添加或者删除可见的 DOM 元素；</span><br><span class="line">（2）元素尺寸改变——边距、填充、边框、宽度和高度</span><br><span class="line">（3）内容变化，比如用户在 input 框中输入文字</span><br><span class="line">（4）浏览器窗口尺寸改变——resize事件发生时</span><br><span class="line">（5）计算 offsetWidth 和 offsetHeight 属性</span><br><span class="line">（6）设置 style 属性的值</span><br><span class="line">（7）当你修改网页的默认字体时。</span><br><span class="line"></span><br><span class="line">回流必定会发生重绘，重绘不一定会引发回流。回流所需的成本比重绘高的多，改变父节点里的子节点很可能会导致父节点的一系列</span><br><span class="line">回流。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>   常见引起重绘属性和方法：</p><p>   <img src="https://cavszhouyou-1254093697.cos.ap-chongqing.myqcloud.com/note-14.png" alt="常见引起回流属性和方法"></p><p>   常见引起回流属性和方法：</p><p>   <img src="https://cavszhouyou-1254093697.cos.ap-chongqing.myqcloud.com/note-13.png" alt="常见引起重绘属性和方法"></p><p>   详细资料可以参考：<br>   <a href="https://juejin.im/post/5a9923e9518825558251c96a">《浏览器的回流与重绘》</a></p><h2 id="如何减少回流？（浏览器绘制过程）"><a href="#如何减少回流？（浏览器绘制过程）" class="headerlink" title="如何减少回流？（浏览器绘制过程）"></a>如何减少回流？（浏览器绘制过程）</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">（1）使用 transform 替代 top</span><br><span class="line"></span><br><span class="line">（2）不要把节点的属性值放在一个循环里当成循环里的变量</span><br><span class="line"></span><br><span class="line">（3）不要使用 table 布局，可能很小的一个小改动会造成整个 table 的重新布局</span><br><span class="line"></span><br><span class="line">（4）把 DOM 离线后修改。如：使用 documentFragment 对象在内存里操作 DOM</span><br><span class="line"></span><br><span class="line">（5）不要一条一条地修改 DOM 的样式。与其这样，还不如预先定义好 css 的 class，然后修改 DOM 的 className。</span><br></pre></td></tr></table></figure><h2 id="为什么操作-DOM-慢？（浏览器绘制过程）"><a href="#为什么操作-DOM-慢？（浏览器绘制过程）" class="headerlink" title="为什么操作 DOM 慢？（浏览器绘制过程）"></a>为什么操作 DOM 慢？（浏览器绘制过程）</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一些 DOM 的操作或者属性访问可能会引起页面的回流和重绘，从而引起性能上的消耗。</span><br></pre></td></tr></table></figure><h2 id="DOMContentLoaded-事件和-Load-事件的区别？"><a href="#DOMContentLoaded-事件和-Load-事件的区别？" class="headerlink" title="DOMContentLoaded 事件和 Load 事件的区别？"></a>DOMContentLoaded 事件和 Load 事件的区别？</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">当初始的 HTML 文档被完全加载和解析完成之后，DOMContentLoaded 事件被触发，而无需等待样式表、图像和</span><br><span class="line">子框架的加载完成。</span><br><span class="line"></span><br><span class="line">Load 事件是当所有资源加载完成后触发的。</span><br></pre></td></tr></table></figure><p>   详细资料可以参考：<br>   <a href="https://www.jianshu.com/p/ca8dae435a2c">《DOMContentLoaded 事件 和 Load 事件的区别？》</a></p><h2 id="HTML5-有哪些新特性、移除了那些元素？"><a href="#HTML5-有哪些新特性、移除了那些元素？" class="headerlink" title="HTML5 有哪些新特性、移除了那些元素？"></a>HTML5 有哪些新特性、移除了那些元素？</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。</span><br><span class="line"></span><br><span class="line">新增的有：</span><br><span class="line"> </span><br><span class="line">绘画 canvas;</span><br><span class="line">用于媒介回放的 video 和 audio 元素;</span><br><span class="line">本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失;</span><br><span class="line">sessionStorage 的数据在浏览器关闭后自动删除;</span><br><span class="line">语意化更好的内容元素，比如 article、footer、header、nav、section;</span><br><span class="line">表单控件，calendar、date、time、email、url、search;</span><br><span class="line">新的技术 webworker, websocket;</span><br><span class="line">新的文档属性 document.visibilityState</span><br><span class="line"></span><br><span class="line">移除的元素有：</span><br><span class="line"></span><br><span class="line">纯表现的元素：basefont，big，center，font, s，strike，tt，u;</span><br><span class="line">对可用性产生负面影响的元素：frame，frameset，noframes；</span><br></pre></td></tr></table></figure><h2 id="如何处理-HTML5-新标签的浏览器兼容问题？"><a href="#如何处理-HTML5-新标签的浏览器兼容问题？" class="headerlink" title="如何处理 HTML5 新标签的浏览器兼容问题？"></a>如何处理 HTML5 新标签的浏览器兼容问题？</h2>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">（1） IE8/IE7/IE6 支持通过 document.createElement 方法产生的标签，可以利用这一特性让这些浏览器</span><br><span class="line">    支持 HTML5 新标签，浏览器支持新标签后，还需要添加标签默认的样式。</span><br><span class="line"></span><br><span class="line">（2） 当然也可以直接使用成熟的框架，比如 html5shiv ;</span><br><span class="line">     `<span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">     &lt;script&gt; src=&quot;https://cdn.jsdelivr.net/npm/html5shiv/dist/html5shiv.min.js&quot;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">     &lt;![endif]--&gt;</span>`</span><br><span class="line"></span><br><span class="line">     [if lte IE 9]……[endif] 判断 IE 的版本，限定只有 IE9 以下浏览器版本需要执行的语句。</span><br></pre></td></tr></table></figure><h2 id="简述一下你对-HTML-语义化的理解？"><a href="#简述一下你对-HTML-语义化的理解？" class="headerlink" title="简述一下你对 HTML 语义化的理解？"></a>简述一下你对 HTML 语义化的理解？</h2><p>   相关知识点：<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（1） 用正确的标签做正确的事情。</span><br><span class="line">（2） html 语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析;</span><br><span class="line">（3） 即使在没有样式 CSS 情况下也以一种文档格式显示，并且是容易阅读的;</span><br><span class="line">（4） 搜索引擎的爬虫也依赖于 HTML 标记来确定上下文和各个关键字的权重，利于 SEO ;</span><br><span class="line">（5） 使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。</span><br></pre></td></tr></table></figure></p><p>   回答：<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">我认为 html 语义化主要指的是我们应该使用合适的标签来划分网页内容的结构。html 的本质作用其实就是定义网页文档的结构，</span><br><span class="line">一个语义化的文档，能够使页面的结构更加清晰，易于理解。这样不仅有利于开发者的维护和理解，同时也能够使机器对文档内容进</span><br><span class="line">行正确的解读。比如说我们常用的 b 标签和 strong 标签，它们在样式上都是文字的加粗，但是 strong 标签拥有强调的语义。</span><br><span class="line">对于一般显示来说，可能我们看上去没有差异，但是对于机器来说，就会有很大的不同。如果用户使用的是屏幕阅读器来访问网页的</span><br><span class="line">话，使用 strong 标签就会有明显的语调上的变化，而 b 标签则没有。如果是搜索引擎的爬虫对我们网页进行分析的话，那么它会</span><br><span class="line">依赖于 html 标签来确定上下文和各个关键字的权重，一个语义化的文档对爬虫来说是友好的，是有利于爬虫对文档内容解读的，</span><br><span class="line">从而有利于我们网站的 SEO 。从 html5 我们可以看出，标准是倾向于以语义化的方式来构建网页的，比如新增了 header 、fo</span><br><span class="line">oter 这些语义标签，删除了 big 、font 这些没有语义的标签。</span><br></pre></td></tr></table></figure><br>   详细资料可以参考：<br>   <a href="https://www.html.cn/archives/1668">《语义化的 HTML 结构到底有什么好处？》</a><br>   <a href="https://www.zhihu.com/question/20455165">《如何理解 Web 语义化？》</a><br>   <a href="https://juejin.im/post/5a9c8866f265da23741072bf#heading-5">《我的 HTML 会说话——从实用出发，谈谈 HTML 的语义化》</a></p><h2 id="b-与-strong-的区别和-i-与-em-的区别？"><a href="#b-与-strong-的区别和-i-与-em-的区别？" class="headerlink" title="b 与 strong 的区别和 i 与 em 的区别？"></a>b 与 strong 的区别和 i 与 em 的区别？</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">从页面显示效果来看，被 &lt;b&gt; 和 &lt;strong&gt; 包围的文字将会被加粗，而被 &lt;i&gt; 和 &lt;em&gt; 包围的文字将以斜体的形式呈现。</span><br><span class="line"></span><br><span class="line">但是 &lt;b&gt; &lt;i&gt; 是自然样式标签，分别表示无意义的加粗，无意义的斜体，表现样式为 &#123; font-weight: bolder&#125;，仅仅表示「这</span><br><span class="line">里应该用粗体显示」或者「这里应该用斜体显示」，此两个标签在 HTML4.01 中并不被推荐使用。</span><br><span class="line"></span><br><span class="line">而 &lt;em&gt; 和 &lt;strong&gt; 是语义样式标签。 &lt;em&gt; 表示一般的强调文本，而 &lt;strong&gt; 表示比 &lt;em&gt; 语义更强的强调文本。</span><br><span class="line"></span><br><span class="line">使用阅读设备阅读网页时：&lt;strong&gt; 会重读，而 &lt;b&gt; 是展示强调内容。</span><br></pre></td></tr></table></figure><p>   详细资料可以参考：<br>   <a href="https://www.zhihu.com/question/19551271">《HTML5 中的 b/strong，i/em 有什么区别？》</a></p><h2 id="前端需要注意哪些-SEO-？"><a href="#前端需要注意哪些-SEO-？" class="headerlink" title="前端需要注意哪些 SEO ？"></a>前端需要注意哪些 SEO ？</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">（1）合理的 title、description、keywords：搜索对着三项的权重逐个减小，title 值强调重点即可，重要关键词出现不要超</span><br><span class="line">    过2次，而且要靠前，不同页面 title 要有所不同；description 把页面内容高度概括，长度合适，不可过分堆砌关键词，不</span><br><span class="line">    同页面 description 有所不同；keywords 列举出重要关键词即可。</span><br><span class="line"></span><br><span class="line">（2）语义化的 HTML 代码，符合 W3C 规范：语义化代码让搜索引擎容易理解网页。</span><br><span class="line"></span><br><span class="line">（3）重要内容 HTML 代码放在最前：搜索引擎抓取 HTML 顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容肯定被</span><br><span class="line">    抓取。</span><br><span class="line"> </span><br><span class="line">（4）重要内容不要用 js 输出：爬虫不会执行 js 获取内容</span><br><span class="line"></span><br><span class="line">（5）少用 iframe：搜索引擎不会抓取 iframe 中的内容</span><br><span class="line"></span><br><span class="line">（6）非装饰性图片必须加 alt</span><br><span class="line"></span><br><span class="line">（7）提高网站速度：网站速度是搜索引擎排序的一个重要指标</span><br></pre></td></tr></table></figure><h2 id="HTML5-的离线储存怎么使用，工作原理能不能解释一下？"><a href="#HTML5-的离线储存怎么使用，工作原理能不能解释一下？" class="headerlink" title="HTML5 的离线储存怎么使用，工作原理能不能解释一下？"></a>HTML5 的离线储存怎么使用，工作原理能不能解释一下？</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。</span><br><span class="line"></span><br><span class="line">原理：HTML5 的离线存储是基于一个新建的 .appcache 文件的缓存机制（不是存储技术），通过这个文件上的解析清单离线存储资</span><br><span class="line">     源，这些资源就会像 cookie 一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面</span><br><span class="line">     展示。</span><br><span class="line"></span><br><span class="line">如何使用：</span><br><span class="line"></span><br><span class="line">（1）创建一个和 html 同名的 manifest 文件，然后在页面头部像下面一样加入一个 manifest 的属性。</span><br><span class="line"></span><br><span class="line">    &lt;html lang=&quot;en&quot; manifest=&quot;index.manifest&quot;&gt;</span><br><span class="line"></span><br><span class="line">（2）在如下 cache.manifest 文件的编写离线存储的资源。</span><br><span class="line">  CACHE MANIFEST</span><br><span class="line">  #v0.11</span><br><span class="line">  CACHE:</span><br><span class="line">  js/app.js</span><br><span class="line">  css/style.css</span><br><span class="line">  NETWORK:</span><br><span class="line">  resourse/logo.png</span><br><span class="line">  FALLBACK:</span><br><span class="line">  / /offline.html</span><br><span class="line"></span><br><span class="line">    CACHE: 表示需要离线存储的资源列表，由于包含 manifest 文件的页面将被自动离线存储，所以不需要把页面自身也列出</span><br><span class="line">           来。</span><br><span class="line"></span><br><span class="line">    NETWORK: 表示在它下面列出来的资源只有在在线的情况下才能访问，他们不会被离线存储，所以在离线情况下无法使用这些</span><br><span class="line">             资源。不过，如果在 CACHE 和 NETWORK 中有一个相同的资源，那么这个资源还是会被离线存储，也就是说 C</span><br><span class="line">             ACHE 的优先级更高。</span><br><span class="line"></span><br><span class="line">    FALLBACK: 表示如果访问第一个资源失败，那么就使用第二个资源来替换他，比如上面这个文件表示的就是如果访问根目录下</span><br><span class="line">              任何一个资源失败了，那么就去访问 offline.html 。</span><br><span class="line"></span><br><span class="line">（3）在离线状态时，操作 window.applicationCache 进行离线缓存的操作。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如何更新缓存：</span><br><span class="line"></span><br><span class="line">（1）更新 manifest 文件</span><br><span class="line">（2）通过 javascript 操作</span><br><span class="line">（3）清除浏览器缓存</span><br><span class="line"></span><br><span class="line">注意事项：</span><br><span class="line"></span><br><span class="line">（1）浏览器对缓存数据的容量限制可能不太一样（某些浏览器设置的限制是每个站点 5MB）。</span><br><span class="line">（2）如果 manifest 文件，或者内部列举的某一个文件不能正常下载，整个更新过程都将失败，浏览器继续全部使用老的缓存。</span><br><span class="line">（3）引用 manifest 的 html 必须与 manifest 文件同源，在同一个域下。</span><br><span class="line">（4）FALLBACK 中的资源必须和 manifest 文件同源。</span><br><span class="line">（5）当一个资源被缓存后，该浏览器直接请求这个绝对路径也会访问缓存中的资源。</span><br><span class="line">（6）站点中的其他页面即使没有设置 manifest 属性，请求的资源如果在缓存中也从缓存中访问。</span><br><span class="line">（7）当 manifest 文件发生改变时，资源请求本身也会触发更新。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>   详细的使用可以参考：<br>   <a href="https://yanhaijing.com/html/2014/12/28/html5-manifest/">《HTML5 离线缓存-manifest 简介》</a><br>   <a href="https://segmentfault.com/a/1190000000732617">《有趣的 HTML5：离线存储》</a></p><h2 id="浏览器是怎么对-HTML5-的离线储存资源进行管理和加载的呢？"><a href="#浏览器是怎么对-HTML5-的离线储存资源进行管理和加载的呢？" class="headerlink" title="浏览器是怎么对 HTML5 的离线储存资源进行管理和加载的呢？"></a>浏览器是怎么对 HTML5 的离线储存资源进行管理和加载的呢？</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在线的情况下，浏览器发现 html 头部有 manifest 属性，它会请求 manifest 文件，如果是第一次访问 app ，那么浏览器</span><br><span class="line">就会根据 manifest 文件的内容下载相应的资源并且进行离线存储。如果已经访问过 app 并且资源已经离线存储了，那么浏览器</span><br><span class="line">就会使用离线的资源加载页面，然后浏览器会对比新的 manifest 文件与旧的 manifest 文件，如果文件没有发生改变，就不做</span><br><span class="line">任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。</span><br><span class="line"></span><br><span class="line">离线的情况下，浏览器就直接使用离线存储的资源。</span><br></pre></td></tr></table></figure><h2 id="常见的浏览器端的存储技术有哪些？"><a href="#常见的浏览器端的存储技术有哪些？" class="headerlink" title="常见的浏览器端的存储技术有哪些？"></a>常见的浏览器端的存储技术有哪些？</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">浏览器常见的存储技术有 cookie、localStorage 和 sessionStorage。</span><br><span class="line"></span><br><span class="line">还有两种存储技术用于大规模数据存储，webSQL（已被废除）和 indexDB。</span><br><span class="line"></span><br><span class="line">IE 支持 userData 存储数据，但是基本很少使用到，除非有很强的浏览器兼容需求。</span><br></pre></td></tr></table></figure><p>   详细的资料可以参考：<br>   <a href="https://segmentfault.com/a/1190000012578794#articleHeader0">《很全很全的前端本地存储讲解》</a></p><h2 id="请描述一下-cookies，sessionStorage-和-localStorage-的区别？"><a href="#请描述一下-cookies，sessionStorage-和-localStorage-的区别？" class="headerlink" title="请描述一下 cookies，sessionStorage 和 localStorage 的区别？"></a>请描述一下 cookies，sessionStorage 和 localStorage 的区别？</h2><p>   相关资料：<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">SessionStorage， LocalStorage， Cookie 这三者都可以被用来在浏览器端存储数据，而且都是字符串类型的键值对。区别</span><br><span class="line">在于前两者属于 HTML5 WebStorage，创建它们的目的便于客户端存储数据。而 cookie 是网站为了标示用户身份而储存在用户</span><br><span class="line">本地终端上的数据（通常经过加密）。cookie 数据始终在同源（协议、主机、端口相同）的 http 请求中携带（即使不需要），会</span><br><span class="line">在浏览器和服务器间来回传递。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">存储大小：</span><br><span class="line">  cookie 数据大小不能超过4 k 。</span><br><span class="line">  sessionStorage 和 localStorage 虽然也有存储大小的限制，但比 cookie 大得多，可以达到 5M 或更大。</span><br><span class="line"></span><br><span class="line">有期时间：</span><br><span class="line">  localStorage    存储持久数据，浏览器关闭后数据不丢失除非主动删除数据。</span><br><span class="line">  sessionStorage  数据在页面会话结束时会被清除。页面会话在浏览器打开期间一直保持，并且重新加载或恢复页面仍会</span><br><span class="line">                    保持原来的页面会话。在新标签或窗口打开一个页面时会在顶级浏览上下文中初始化一个新的会话。</span><br><span class="line">  cookie          设置的 cookie 过期时间之前一直有效，即使窗口或浏览器关闭。</span><br><span class="line"> </span><br><span class="line">作用域：</span><br><span class="line">    sessionStorage  只在同源的同窗口（或标签页）中共享数据，也就是只在当前会话中共享。</span><br><span class="line">    localStorage    在所有同源窗口中都是共享的。</span><br><span class="line">    cookie          在所有同源窗口中都是共享的。</span><br></pre></td></tr></table></figure></p><p>   回答：<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">浏览器端常用的存储技术是 cookie 、localStorage 和 sessionStorage。</span><br><span class="line"></span><br><span class="line">cookie 其实最开始是服务器端用于记录用户状态的一种方式，由服务器设置，在客户端存储，然后每次发起同源请求时，发送给服</span><br><span class="line">务器端。cookie 最多能存储 4 k 数据，它的生存时间由 expires 属性指定，并且 cookie 只能被同源的页面访问共享。</span><br><span class="line"></span><br><span class="line">sessionStorage 是 html5 提供的一种浏览器本地存储的方法，它借鉴了服务器端 session 的概念，代表的是一次会话中所保</span><br><span class="line">存的数据。它一般能够存储 5M 或者更大的数据，它在当前窗口关闭后就失效了，并且 sessionStorage 只能被同一个窗口的同源</span><br><span class="line">页面所访问共享。</span><br><span class="line"></span><br><span class="line">localStorage 也是 html5 提供的一种浏览器本地存储的方法，它一般也能够存储 5M 或者更大的数据。它和 sessionStorage </span><br><span class="line">不同的是，除非手动删除它，否则它不会失效，并且 localStorage 也只能被同源页面所访问共享。</span><br><span class="line"></span><br><span class="line">上面几种方式都是存储少量数据的时候的存储方式，当我们需要在本地存储大量数据的时候，我们可以使用浏览器的 indexDB 这是浏</span><br><span class="line">览器提供的一种本地的数据库存储机制。它不是关系型数据库，它内部采用对象仓库的形式存储数据，它更接近 NoSQL 数据库。</span><br></pre></td></tr></table></figure></p><p>   详细的资料可以参考：<br>   <a href="https://segmentfault.com/a/1190000017423117">《请描述一下 cookies，sessionStorage 和 localStorage 的区别？》</a><br>   <a href="http://www.ruanyifeng.com/blog/2018/07/indexeddb.html">《浏览器数据库 IndexedDB 入门教程》</a></p><h2 id="iframe-有那些缺点？"><a href="#iframe-有那些缺点？" class="headerlink" title="iframe 有那些缺点？"></a>iframe 有那些缺点？</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">iframe 元素会创建包含另外一个文档的内联框架（即行内框架）。</span><br><span class="line"></span><br><span class="line">主要缺点有：</span><br><span class="line"></span><br><span class="line">（1） iframe 会阻塞主页面的 onload 事件。window 的 onload 事件需要在所有 iframe 加载完毕后（包含里面的元素）才</span><br><span class="line">     会触发。在 Safari 和 Chrome 里，通过 JavaScript 动态设置 iframe 的 src 可以避免这种阻塞情况。</span><br><span class="line">（2） 搜索引擎的检索程序无法解读这种页面，不利于网页的 SEO 。</span><br><span class="line">（3） iframe 和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。</span><br><span class="line">（4） 浏览器的后退按钮失效。</span><br><span class="line">（5） 小型的移动设备无法完全显示框架。</span><br></pre></td></tr></table></figure><p>   详细的资料可以参考：<br>   <a href="https://blog.csdn.net/yintianqin/article/details/72625785">《使用 iframe 的优缺点》</a><br>   <a href="https://segmentfault.com/a/1190000009891683">《iframe 简单探索以及 iframe 跨域处理》</a></p><h2 id="Label-的作用是什么？是怎么用的？"><a href="#Label-的作用是什么？是怎么用的？" class="headerlink" title="Label 的作用是什么？是怎么用的？"></a>Label 的作用是什么？是怎么用的？</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">label 标签来定义表单控制间的关系，当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。</span><br><span class="line"></span><br><span class="line">&lt;label for=&quot;Name&quot;&gt;Number:&lt;/label&gt;</span><br><span class="line">&lt;input type=“text“ name=&quot;Name&quot; id=&quot;Name&quot;/&gt;</span><br></pre></td></tr></table></figure><h2 id="HTML5-的-form-的自动完成功能是什么？"><a href="#HTML5-的-form-的自动完成功能是什么？" class="headerlink" title="HTML5 的 form 的自动完成功能是什么？"></a>HTML5 的 form 的自动完成功能是什么？</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">autocomplete 属性规定输入字段是否应该启用自动完成功能。默认为启用，设置为 autocomplete=off 可以关闭该功能。</span><br><span class="line"></span><br><span class="line">自动完成允许浏览器预测对字段的输入。当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出在字段中填写的选项。</span><br><span class="line"></span><br><span class="line">autocomplete 属性适用于 &lt;form&gt;，以及下面的 &lt;input&gt; 类型：text, search, url, telephone, email, password, </span><br><span class="line">datepickers, range 以及 color。</span><br></pre></td></tr></table></figure><h2 id="如何实现浏览器内多个标签页之间的通信"><a href="#如何实现浏览器内多个标签页之间的通信" class="headerlink" title="如何实现浏览器内多个标签页之间的通信?"></a>如何实现浏览器内多个标签页之间的通信?</h2><p>   相关资料：<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">（1）使用 WebSocket，通信的标签页连接同一个服务器，发送消息到服务器后，服务器推送消息给所有连接的客户端。</span><br><span class="line"></span><br><span class="line">（2）使用 SharedWorker （只在 chrome 浏览器实现了），两个页面共享同一个线程，通过向线程发送数据和接收数据来实现标</span><br><span class="line">    签页之间的双向通行。</span><br><span class="line"></span><br><span class="line">（3）可以调用 localStorage、cookies 等本地存储方式，localStorge 另一个浏览上下文里被添加、修改或删除时，它都会触</span><br><span class="line">    发一个 storage 事件，我们通过监听 storage 事件，控制它的值来进行页面信息通信；</span><br><span class="line"></span><br><span class="line">（4）如果我们能够获得对应标签页的引用，通过 postMessage 方法也是可以实现多个标签页通信的。</span><br></pre></td></tr></table></figure></p><p>   回答：<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">实现多个标签页之间的通信，本质上都是通过中介者模式来实现的。因为标签页之间没有办法直接通信，因此我们可以找一个中介者，</span><br><span class="line">让标签页和中介者进行通信，然后让这个中介者来进行消息的转发。</span><br><span class="line"></span><br><span class="line">第一种实现的方式是使用 websocket 协议，因为 websocket 协议可以实现服务器推送，所以服务器就可以用来当做这个中介者。</span><br><span class="line">标签页通过向服务器发送数据，然后由服务器向其他标签页推送转发。</span><br><span class="line"></span><br><span class="line">第二种是使用 ShareWorker 的方式，shareWorker 会在页面存在的生命周期内创建一个唯一的线程，并且开启多个页面也只会使</span><br><span class="line">用同一个线程。这个时候共享线程就可以充当中介者的角色。标签页间通过共享一个线程，然后通过这个共享的线程来实现数据的交</span><br><span class="line">换。</span><br><span class="line"></span><br><span class="line">第三种方式是使用 localStorage 的方式，我们可以在一个标签页对 localStorage 的变化事件进行监听，然后当另一个标签页</span><br><span class="line">修改数据的时候，我们就可以通过这个监听事件来获取到数据。这个时候 localStorage 对象就是充当的中介者的角色。</span><br><span class="line"></span><br><span class="line">还有一种方式是使用 postMessage 方法，如果我们能够获得对应标签页的引用，我们就可以使用 postMessage 方法，进行通信。</span><br></pre></td></tr></table></figure><br>   详细的资料可以参考：</p><p>   <a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html">《WebSocket 教程》</a><br>   <a href="https://www.cnblogs.com/chyingp/p/websocket-deep-in.html">《WebSocket 协议：5分钟从入门到精通》</a><br>   <a href="https://segmentfault.com/a/1190000011538416">《WebSocket 学习（一）——基于 socket.io 实现简单多人聊天室》</a><br>   <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API">《使用 Web Storage API》</a><br>   <a href="https://www.zhuwenlong.com/blog/article/590ea64fe55f0f385f9a12e5">《JavaScript 的多线程，Worker 和 SharedWorker》</a><br>   <a href="https://juejin.im/post/5acdba01f265da23826e5633#heading-1">《实现多个标签页之间通信的几种方法》</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端面试 </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 前端面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML相关问题-01</title>
      <link href="/47977.html"/>
      <url>/47977.html</url>
      
        <content type="html"><![CDATA[<h2 id="DOCTYPE-的作用是什么？"><a href="#DOCTYPE-的作用是什么？" class="headerlink" title="DOCTYPE 的作用是什么？"></a>DOCTYPE 的作用是什么？</h2><p>   相关知识点：<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IE5.5 引入了文档模式的概念，而这个概念是通过使用文档类型（DOCTYPE）切换实现的。</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE&gt;声明位于 HTML 文档中的第一行，处于 &lt;html&gt; 标签之前。告知浏览器的解析器用什么文档标准解析这个文档。</span><br><span class="line"></span><br><span class="line">DOCTYPE 不存在或格式不正确会导致文档以兼容模式呈现。</span><br></pre></td></tr></table></figure></p><p>   回答（参考1-5）：<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE&gt;  声明一般位于文档的第一行，它的作用主要是告诉浏览器以什么样的模式来解析文档。一般指定了之后会以标准模式来</span><br><span class="line">进行文档解析，否则就以兼容模式进行解析。在标准模式下，浏览器的解析规则都是按照最新的标准进行解析的。而在兼容模式下，浏</span><br><span class="line">览器会以向后兼容的方式来模拟老式浏览器的行为，以保证一些老的网站的正确访问。</span><br><span class="line"></span><br><span class="line">在 html5 之后不再需要指定 DTD 文档，因为 html5 以前的 html 文档都是基于 SGML 的，所以需要通过指定 DTD 来定义文</span><br><span class="line">档中允许的属性以及一些规则。而 html5 不再基于 SGML 了，所以不再需要使用 DTD。</span><br></pre></td></tr></table></figure></p><h2 id="标准模式与兼容模式各有什么区别？"><a href="#标准模式与兼容模式各有什么区别？" class="headerlink" title="标准模式与兼容模式各有什么区别？"></a>标准模式与兼容模式各有什么区别？</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">标准模式的渲染方式和 JS 引擎的解析方式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示</span><br><span class="line">，模拟老式浏览器的行为以防止站点无法工作。</span><br></pre></td></tr></table></figure><h2 id="HTML5-为什么只需要写-lt-DOCTYPE-HTML-gt-，而不需要引入-DTD？"><a href="#HTML5-为什么只需要写-lt-DOCTYPE-HTML-gt-，而不需要引入-DTD？" class="headerlink" title="HTML5 为什么只需要写 &lt;!DOCTYPE HTML&gt;，而不需要引入 DTD？"></a>HTML5 为什么只需要写 <code>&lt;!DOCTYPE HTML&gt;</code>，而不需要引入 DTD？</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTML5 不基于 SGML，因此不需要对 DTD 进行引用，但是需要 DOCTYPE 来规范浏览器的行为（让浏览器按照它们应该的方式来运</span><br><span class="line">行）。</span><br><span class="line"></span><br><span class="line">而 HTML4.01 基于 SGML ，所以需要对 DTD 进行引用，才能告知浏览器文档所使用的文档类型。</span><br></pre></td></tr></table></figure><h2 id="4-SGML-、-HTML-、XML-和-XHTML-的区别？"><a href="#4-SGML-、-HTML-、XML-和-XHTML-的区别？" class="headerlink" title="4. SGML 、 HTML 、XML 和 XHTML 的区别？"></a>4. SGML 、 HTML 、XML 和 XHTML 的区别？</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SGML 是标准通用标记语言，是一种定义电子文档结构和描述其内容的国际标准语言，是所有电子文档标记语言的起源。</span><br><span class="line"></span><br><span class="line">HTML 是超文本标记语言，主要是用于规定怎么显示网页。</span><br><span class="line"></span><br><span class="line">XML 是可扩展标记语言是未来网页语言的发展方向，XML 和 HTML 的最大区别就在于 XML 的标签是可以自己创建的，数量无限多，</span><br><span class="line">而 HTML 的标签都是固定的而且数量有限。</span><br><span class="line"></span><br><span class="line">XHTML 也是现在基本上所有网页都在用的标记语言，他其实和 HTML 没什么本质的区别，标签都一样，用法也都一样，就是比 HTML </span><br><span class="line">更严格，比如标签必须都用小写，标签都必须有闭合标签等。</span><br></pre></td></tr></table></figure><h2 id="5-DTD-介绍"><a href="#5-DTD-介绍" class="headerlink" title="5. DTD 介绍"></a>5. DTD 介绍</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DTD（ Document Type Definition 文档类型定义）是一组机器可读的规则，它们定义 XML 或 HTML 的特定版本中所有允许元</span><br><span class="line">素及它们的属性和层次关系的定义。在解析网页时，浏览器将使用这些规则检查页面的有效性并且采取相应的措施。</span><br><span class="line"></span><br><span class="line">DTD 是对 HTML 文档的声明，还会影响浏览器的渲染模式（工作模式）。</span><br></pre></td></tr></table></figure><h2 id="6-行内元素定义"><a href="#6-行内元素定义" class="headerlink" title="6. 行内元素定义"></a>6. 行内元素定义</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTML4 中，元素被分成两大类: inline （内联元素）与 block（块级元素）。一个行内元素只占据它对应标签的边框所包含的空</span><br><span class="line">间。</span><br><span class="line"></span><br><span class="line">常见的行内元素有 a b span img strong sub sup button input label select textarea</span><br></pre></td></tr></table></figure><h2 id="7-块级元素定义"><a href="#7-块级元素定义" class="headerlink" title="7. 块级元素定义"></a>7. 块级元素定义</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">块级元素占据其父元素（容器）的整个宽度，因此创建了一个“块”。</span><br><span class="line"></span><br><span class="line">常见的块级元素有  div ul ol li dl dt dd h1 h2 h3 h4 h5 h6 p </span><br></pre></td></tr></table></figure><h2 id="行内元素与块级元素的区别？"><a href="#行内元素与块级元素的区别？" class="headerlink" title="行内元素与块级元素的区别？"></a>行内元素与块级元素的区别？</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTML4中，元素被分成两大类：inline （内联元素）与 block （块级元素）。</span><br><span class="line"></span><br><span class="line">（1） 格式上，默认情况下，行内元素不会以新行开始，而块级元素会新起一行。</span><br><span class="line">（2） 内容上，默认情况下，行内元素只能包含文本和其他行内元素。而块级元素可以包含行内元素和其他块级元素。</span><br><span class="line">（3） 行内元素与块级元素属性的不同，主要是盒模型属性上：行内元素设置 width 无效，height 无效（可以设置 line-hei</span><br><span class="line">     ght），设置 margin 和 padding 的上下不会对其他元素产生影响。</span><br></pre></td></tr></table></figure><h2 id="HTML5-元素的分类"><a href="#HTML5-元素的分类" class="headerlink" title="HTML5 元素的分类"></a>HTML5 元素的分类</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTML4中，元素被分成两大类: inline（内联元素）与 block（块级元素）。但在实际的开发过程中，因为页面表现的需要，前</span><br><span class="line">端工程师经常把 inline 元素的 display 值设定为 block （比如 a 标签），也经常把 block 元素的 display 值设定为</span><br><span class="line">inline 之后更是出现了 inline-block 这一对外呈现 inline 对内呈现 block 的属性。因此，简单地把 HTML 元素划分为</span><br><span class="line">inline 与 block 已经不再符合实际需求。</span><br><span class="line"></span><br><span class="line">HTML5中，元素主要分为7类：Metadata Flow Sectioning Heading Phrasing Embedded Interactive</span><br></pre></td></tr></table></figure><h2 id="空元素定义"><a href="#空元素定义" class="headerlink" title="空元素定义"></a>空元素定义</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">标签内没有内容的 HTML 标签被称为空元素。空元素是在开始标签中关闭的。</span><br><span class="line"></span><br><span class="line">常见的空元素有：br hr img input link meta</span><br></pre></td></tr></table></figure><h2 id="link-标签定义"><a href="#link-标签定义" class="headerlink" title="link 标签定义"></a>link 标签定义</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">link 标签定义文档与外部资源的关系。</span><br><span class="line"></span><br><span class="line">link 元素是空元素，它仅包含属性。 此元素只能存在于 head 部分，不过它可出现任何次数。</span><br><span class="line"></span><br><span class="line">link 标签中的 rel 属性定义了当前文档与被链接文档之间的关系。常见的 stylesheet 指的是定义一个外部加载的样式表。</span><br></pre></td></tr></table></figure><h2 id="页面导入样式时，使用-link-和-import-有什么区别？"><a href="#页面导入样式时，使用-link-和-import-有什么区别？" class="headerlink" title="页面导入样式时，使用 link 和 @import 有什么区别？"></a>页面导入样式时，使用 link 和 @import 有什么区别？</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">（1）从属关系区别。 @import 是 CSS 提供的语法规则，只有导入样式表的作用；link 是 HTML 提供的标签，不仅可以加</span><br><span class="line">     载 CSS 文件，还可以定义 RSS、rel 连接属性、引入网站图标等。</span><br><span class="line"></span><br><span class="line">（2）加载顺序区别。加载页面时，link 标签引入的 CSS 被同时加载；@import 引入的 CSS 将在页面加载完毕后被加载。</span><br><span class="line"></span><br><span class="line">（3）兼容性区别。@import 是 CSS2.1 才有的语法，故只可在 IE5+ 才能识别；link 标签作为 HTML 元素，不存在兼容</span><br><span class="line">     性问题。</span><br><span class="line"></span><br><span class="line">（4）DOM 可控性区别。可以通过 JS 操作 DOM ，插入 link 标签来改变样式；由于 DOM 方法是基于文档的，无法使用 @i</span><br><span class="line">    mport 的方式插入样式。</span><br></pre></td></tr></table></figure><h2 id="你对浏览器的理解？"><a href="#你对浏览器的理解？" class="headerlink" title="你对浏览器的理解？"></a>你对浏览器的理解？</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">浏览器的主要功能是将用户选择的 web 资源呈现出来，它需要从服务器请求资源，并将其显示在浏览器窗口中，资源的格式通常</span><br><span class="line">是 HTML，也包括 PDF、image 及其他格式。用户用 URI（Uniform Resource Identifier 统一资源标识符）来指定所请</span><br><span class="line">求资源的位置。</span><br><span class="line"></span><br><span class="line">HTML 和 CSS 规范中规定了浏览器解释 html 文档的方式，由 W3C 组织对这些规范进行维护，W3C 是负责制定 web 标准的</span><br><span class="line">组织。</span><br><span class="line"></span><br><span class="line">但是浏览器厂商纷纷开发自己的扩展，对规范的遵循并不完善，这为 web 开发者带来了严重的兼容性问题。</span><br><span class="line"></span><br><span class="line">简单来说浏览器可以分为两部分，shell 和 内核。</span><br><span class="line"></span><br><span class="line">其中 shell 的种类相对比较多，内核则比较少。shell 是指浏览器的外壳：例如菜单，工具栏等。主要是提供给用户界面操作，</span><br><span class="line">参数设置等等。它是调用内核来实现各种功能的。内核才是浏览器的核心。内核是基于标记语言显示内容的程序或模块。也有一些</span><br><span class="line"> 浏览器并不区分外壳和内核。从 Mozilla 将 Gecko 独立出来后，才有了外壳和内核的明确划分。</span><br></pre></td></tr></table></figure><h2 id="介绍一下你对浏览器内核的理解？"><a href="#介绍一下你对浏览器内核的理解？" class="headerlink" title="介绍一下你对浏览器内核的理解？"></a>介绍一下你对浏览器内核的理解？</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">主要分成两部分：渲染引擎和 JS 引擎。</span><br><span class="line"></span><br><span class="line">渲染引擎的职责就是渲染，即在浏览器窗口中显示所请求的内容。默认情况下，渲染引擎可以显示 html、xml 文档及图片，它也</span><br><span class="line">可以借助插件（一种浏览器扩展）显示其他类型数据，例如使用 PDF 阅读器插件，可以显示 PDF 格式。</span><br><span class="line"></span><br><span class="line">JS 引擎：解析和执行 javascript 来实现网页的动态效果。</span><br><span class="line"></span><br><span class="line">最开始渲染引擎和 JS 引擎并没有区分的很明确，后来 JS 引擎越来越独立，内核就倾向于只指渲染引擎。</span><br></pre></td></tr></table></figure><h2 id="常见的浏览器内核比较"><a href="#常见的浏览器内核比较" class="headerlink" title="常见的浏览器内核比较"></a>常见的浏览器内核比较</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Trident：这种浏览器内核是 IE 浏览器用的内核，因为在早期 IE 占有大量的市场份额，所以这种内核比较流行，以前有很多</span><br><span class="line">网页也是根据这个内核的标准来编写的，但是实际上这个内核对真正的网页标准支持不是很好。但是由于 IE 的高市场占有率，微</span><br><span class="line">软也很长时间没有更新 Trident 内核，就导致了 Trident 内核和 W3C 标准脱节。还有就是 Trident 内核的大量 Bug 等</span><br><span class="line">安全问题没有得到解决，加上一些专家学者公开自己认为 IE 浏览器不安全的观点，使很多用户开始转向其他浏览器。</span><br><span class="line"></span><br><span class="line">Gecko：这是 Firefox 和 Flock 所采用的内核，这个内核的优点就是功能强大、丰富，可以支持很多复杂网页效果和浏览器扩</span><br><span class="line">展接口，但是代价是也显而易见就是要消耗很多的资源，比如内存。</span><br><span class="line"></span><br><span class="line">Presto：Opera 曾经采用的就是 Presto 内核，Presto 内核被称为公认的浏览网页速度最快的内核，这得益于它在开发时的</span><br><span class="line">天生优势，在处理 JS 脚本等脚本语言时，会比其他的内核快3倍左右，缺点就是为了达到很快的速度而丢掉了一部分网页兼容性。</span><br><span class="line"></span><br><span class="line">Webkit：Webkit 是 Safari 采用的内核，它的优点就是网页浏览速度较快，虽然不及 Presto 但是也胜于 Gecko 和 Trid</span><br><span class="line">ent，缺点是对于网页代码的容错性不高，也就是说对网页代码的兼容性较低，会使一些编写不标准的网页无法正确显示。WebKit </span><br><span class="line">前身是 KDE 小组的 KHTML 引擎，可以说 WebKit 是 KHTML 的一个开源的分支。</span><br><span class="line"></span><br><span class="line">Blink：谷歌在 Chromium Blog 上发表博客，称将与苹果的开源浏览器核心 Webkit 分道扬镳，在 Chromium 项目中研发 B</span><br><span class="line">link 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。其实 Blink 引擎就是 Webkit 的一个分支，就像 webkit 是</span><br><span class="line">KHTML 的分支一样。Blink 引擎现在是谷歌公司与 Opera Software 共同研发，上面提到过的，Opera 弃用了自己的 Presto </span><br><span class="line">内核，加入 Google 阵营，跟随谷歌一起研发 Blink。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>   详细的资料可以参考：<br>   <a href="http://www.cnblogs.com/fullhouse/archive/2011/12/19/2293455.html">《浏览器内核的解析和对比》</a><br>   <a href="https://blog.csdn.net/Summer_15/article/details/71249203">《五大主流浏览器内核的源起以及国内各大浏览器内核总结》</a></p><h2 id="常见浏览器所用内核"><a href="#常见浏览器所用内核" class="headerlink" title="常见浏览器所用内核"></a>常见浏览器所用内核</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">（1） IE 浏览器内核：Trident 内核，也是俗称的 IE 内核；</span><br><span class="line"></span><br><span class="line">（2） Chrome 浏览器内核：统称为 Chromium 内核或 Chrome 内核，以前是 Webkit 内核，现在是 Blink内核；</span><br><span class="line"></span><br><span class="line">（3） Firefox 浏览器内核：Gecko 内核，俗称 Firefox 内核；</span><br><span class="line"></span><br><span class="line">（4） Safari 浏览器内核：Webkit 内核；</span><br><span class="line"></span><br><span class="line">（5） Opera 浏览器内核：最初是自己的 Presto 内核，后来加入谷歌大军，从 Webkit 又到了 Blink 内核；</span><br><span class="line"></span><br><span class="line">（6） 360浏览器、猎豹浏览器内核：IE + Chrome 双内核；</span><br><span class="line"></span><br><span class="line">（7） 搜狗、遨游、QQ 浏览器内核：Trident（兼容模式）+ Webkit（高速模式）；</span><br><span class="line"></span><br><span class="line">（8） 百度浏览器、世界之窗内核：IE 内核；</span><br><span class="line"></span><br><span class="line">（9） 2345浏览器内核：好像以前是 IE 内核，现在也是 IE + Chrome 双内核了；</span><br><span class="line"></span><br><span class="line">（10）UC 浏览器内核：这个众口不一，UC 说是他们自己研发的 U3 内核，但好像还是基于 Webkit 和 Trident ，还有说</span><br><span class="line">     是基于火狐内核。</span><br></pre></td></tr></table></figure><h2 id="浏览器的渲染原理？"><a href="#浏览器的渲染原理？" class="headerlink" title="浏览器的渲染原理？"></a>浏览器的渲染原理？</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">（1）首先解析收到的文档，根据文档定义构建一棵 DOM 树，DOM 树是由 DOM 元素及属性节点组成的。</span><br><span class="line"></span><br><span class="line">（2）然后对 CSS 进行解析，生成 CSSOM 规则树。</span><br><span class="line"></span><br><span class="line">（3）根据 DOM 树和 CSSOM 规则树构建渲染树。渲染树的节点被称为渲染对象，渲染对象是一个包含有颜色和大小等属性的矩</span><br><span class="line">    形，渲染对象和 DOM 元素相对应，但这种对应关系不是一对一的，不可见的 DOM 元素不会被插入渲染树。还有一些 DOM </span><br><span class="line">    元素对应几个可见对象，它们一般是一些具有复杂结构的元素，无法用一个矩形来描述。</span><br><span class="line"></span><br><span class="line">（4）当渲染对象被创建并添加到树中，它们并没有位置和大小，所以当浏览器生成渲染树以后，就会根据渲染树来进行布局（也</span><br><span class="line">    可以叫做回流）。这一阶段浏览器要做的事情是要弄清楚各个节点在页面中的确切位置和大小。通常这一行为也被称为“自动</span><br><span class="line">    重排”。</span><br><span class="line"></span><br><span class="line">（5）布局阶段结束后是绘制阶段，遍历渲染树并调用渲染对象的 paint 方法将它们的内容显示在屏幕上，绘制使用 UI 基础组</span><br><span class="line">    件。</span><br><span class="line"></span><br><span class="line"> 值得注意的是，这个过程是逐步完成的，为了更好的用户体验，渲染引擎将会尽可能早的将内容呈现到屏幕上，并不会等到所有的</span><br><span class="line"> html 都解析完成之后再去构建和布局 render 树。它是解析完一部分内容就显示一部分内容，同时，可能还在通过网络下载其</span><br><span class="line"> 余内容。</span><br></pre></td></tr></table></figure><p>   详细资料可以参考：<br>   <a href="https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdc7207f265da613c09425d">《浏览器渲染原理》</a><br>   <a href="https://coolshell.cn/articles/9666.html">《浏览器的渲染原理简介》</a><br>   <a href="https://kb.cnblogs.com/page/129756/">《前端必读：浏览器内部工作原理》</a><br>   <a href="https://blog.fundebug.com/2019/01/03/understand-browser-rendering/">《深入浅出浏览器渲染原理》</a></p><h2 id="渲染过程中遇到-JS-文件怎么处理？（浏览器解析过程）"><a href="#渲染过程中遇到-JS-文件怎么处理？（浏览器解析过程）" class="headerlink" title="渲染过程中遇到 JS 文件怎么处理？（浏览器解析过程）"></a>渲染过程中遇到 JS 文件怎么处理？（浏览器解析过程）</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 的加载、解析与执行会阻塞文档的解析，也就是说，在构建 DOM 时，HTML 解析器若遇到了 JavaScript，那么</span><br><span class="line">它会暂停文档的解析，将控制权移交给 JavaScript 引擎，等 JavaScript 引擎运行完毕，浏览器再从中断的地方恢复继续解</span><br><span class="line">析文档。</span><br><span class="line"></span><br><span class="line">也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件，这也是都建议将 script 标签放在 body 标签底部的</span><br><span class="line">原因。当然在当下，并不是说 script 标签必须放在底部，因为你可以给 script 标签添加 defer 或者 async 属性。</span><br></pre></td></tr></table></figure><h2 id="async-和-defer-的作用是什么？有什么区别？（浏览器解析过程）"><a href="#async-和-defer-的作用是什么？有什么区别？（浏览器解析过程）" class="headerlink" title="async 和 defer 的作用是什么？有什么区别？（浏览器解析过程）"></a>async 和 defer 的作用是什么？有什么区别？（浏览器解析过程）</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">（1）脚本没有 defer 或 async，浏览器会立即加载并执行指定的脚本，也就是说不等待后续载入的文档元素，读到就加载并执</span><br><span class="line">    行。</span><br><span class="line"></span><br><span class="line">（2）defer 属性表示延迟执行引入的 JavaScript，即这段 JavaScript 加载时 HTML 并未停止解析，这两个过程是并行的。</span><br><span class="line">    当整个 document 解析完毕后再执行脚本文件，在 DOMContentLoaded 事件触发之前完成。多个脚本按顺序执行。</span><br><span class="line"></span><br><span class="line">（3）async 属性表示异步执行引入的 JavaScript，与 defer 的区别在于，如果已经加载好，就会开始执行，也就是说它的执</span><br><span class="line">    行仍然会阻塞文档的解析，只是它的加载过程不会阻塞。多个脚本的执行顺序无法保证。</span><br></pre></td></tr></table></figure><p>   详细资料可以参考：<br>   <a href="https://segmentfault.com/q/1010000000640869">《defer 和 async 的区别》</a></p><h2 id="什么是文档的预解析？（浏览器解析过程）"><a href="#什么是文档的预解析？（浏览器解析过程）" class="headerlink" title="什么是文档的预解析？（浏览器解析过程）"></a>什么是文档的预解析？（浏览器解析过程）</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Webkit 和 Firefox 都做了这个优化，当执行 JavaScript 脚本时，另一个线程解析剩下的文档，并加载后面需要通过网络加</span><br><span class="line">载的资源。这种方式可以使资源并行加载从而使整体速度更快。需要注意的是，预解析并不改变 DOM 树，它将这个工作留给主解析</span><br><span class="line">过程，自己只解析外部资源的引用，比如外部脚本、样式表及图片。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端面试 </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS相关问题</title>
      <link href="/37435.html"/>
      <url>/37435.html</url>
      
        <content type="html"><![CDATA[<h2 id="描述下-“reset”-CSS-文件的作用和使用它的好处"><a href="#描述下-“reset”-CSS-文件的作用和使用它的好处" class="headerlink" title="描述下 “reset” CSS 文件的作用和使用它的好处?"></a>描述下 “reset” CSS 文件的作用和使用它的好处?</h2><p>  A：<br>    - 作用以及好处：因为各个浏览器默认对CSS的渲染有差异，”reset” CSS 通过重新定义标签样式，对浏览器进行默认样式“清零”重置，样式保持一致。<br>    - 不足:<br>      + css文件大小增加；<br>      + 许多样式本身就需要重置，多此一举；<br>      + 增加浏览器对CSS 的渲染。</p><pre><code>可以阅读以下文章增强了解：- [CSS reset的重新审视 – 避免样式重置](http://www.zhangxinxu.com/wordpress/2010/04/css-reset%E7%9A%84%E9%87%8D%E6%96%B0%E5%AE%A1%E8%A7%86-%E9%81%BF%E5%85%8D%E6%A0%B7%E5%BC%8F%E9%87%8D%E7%BD%AE/)- [常见标签的默认属性值及相互作用——关于CSS reset的思考](http://www.cnblogs.com/dolphinx/p/3509515.html)- [reset.css](http://baike.baidu.com/view/5186496.htm)- [前端面试问题](http://handyxuefeng.blog.163.com/blog/static/454521722013111714040259/)</code></pre><h2 id="Q-解释下浮动和它的工作原理？"><a href="#Q-解释下浮动和它的工作原理？" class="headerlink" title="Q: 解释下浮动和它的工作原理？"></a>Q: 解释下浮动和它的工作原理？</h2><p>  A: 浮动出现的最开始出现的意义是用来让文字环绕图片而已。<code>float</code>可以自动包裹元素。<code>float</code>会导致高度塌陷。<code>float</code>为什么会导致高度塌陷：元素含有浮动属性 –&gt; 破坏<code>inline box</code> –&gt; 破坏<code>line box</code>高度 –&gt; 没有高度 –&gt; 塌陷。什么时候会塌陷：当标签里面的元素只要样子没有实际高度时会塌陷。浮动会脱离文档流。产生自己的块级格式化上下文。</p><pre><code>可以阅读以下文章增加理解：- [CSS float浮动的深入研究、详解及拓展(一)](http://www.zhangxinxu.com/wordpress/2010/01/css-float%E6%B5%AE%E5%8A%A8%E7%9A%84%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%E3%80%81%E8%AF%A6%E8%A7%A3%E5%8F%8A%E6%8B%93%E5%B1%95%E4%B8%80/)- [CSS float浮动的深入研究、详解及拓展(二)](http://www.zhangxinxu.com/wordpress/2010/01/css-float%E6%B5%AE%E5%8A%A8%E7%9A%84%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%E3%80%81%E8%AF%A6%E8%A7%A3%E5%8F%8A%E6%8B%93%E5%B1%95%E4%BA%8C/)- [那些年我们一起清除过的浮动](http://www.iyunlu.com/view/css-xhtml/55.html)- 《CSS权威指南》</code></pre><h2 id="列举不同的清除浮动的技巧，并指出它们各自适用的使用场景。"><a href="#列举不同的清除浮动的技巧，并指出它们各自适用的使用场景。" class="headerlink" title="列举不同的清除浮动的技巧，并指出它们各自适用的使用场景。"></a>列举不同的清除浮动的技巧，并指出它们各自适用的使用场景。</h2><ul><li><p>直接把<code>&lt;div style=&quot;clear:both;&quot;&gt;&lt;/div&gt;</code>放到当作最后一个子标签放到父标签那儿，此方法兼容性强，使用方便，但是浪费了一个标签，而且只能使用一次，而且有时候如果不注意中间多了个空格会产生一段空白高度。</p><ul><li>优点：通俗易懂，容易掌握；</li><li>缺点：可以想象通过此方法，会添加多少无意义的空标签，有违结构与表现的分离，在后期维护中将是噩梦。</li></ul></li><li><p>如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.clearfix&#123;overflow:hidden; zoom:1;&#125;</span><br></pre></td></tr></table></figure><p>此方法优点在于代码简洁，涵盖所有浏览器，可是对于<code>overflow:hidden;</code>要是里面的元素要是想来个<code>margin</code>负值定位或是负的绝对定位，岂不是直接被裁掉了，所以此方法是有不小的局限性的。</p><ul><li>优点：不存在结构和语义化问题，代码量极少；</li><li>缺点：内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素。</li></ul></li><li><p>如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.fix&#123;zoom:1;&#125;</span><br><span class="line">.fix:after&#123;</span><br><span class="line">    display:block;</span><br><span class="line">    content:&#x27;.&#x27;;</span><br><span class="line">    clear:both;</span><br><span class="line">    line-height:0;</span><br><span class="line">    visibility:hidden;&#125;</span><br></pre></td></tr></table></figure><p><code>line-height:0</code>写成<code>height:0</code>也是可以的。不会影响任何其他样式，通用性强，覆盖面广，我很推荐哦。</p></li><li><p>父元素也浮动：</p><ul><li>优点：不存在结构和语义化问题，代码量极少</li><li>缺点：使得与父元素相邻的元素的布局会受到影响，不可能一直浮动到body，不推荐使用</li></ul></li></ul><p>  总结：<br>    + 其一，通过在浮动元素的末尾添加一个空元素，设置 <code>clear：both</code>属性，<code>after</code>伪元素其实也是通过 <code>content</code> 在元素的后面生成了内容为一个点的块级元素；<br>    + 其二，通过设置父元素 <code>overflow</code> 或者<code>display：table</code> 属性来闭合浮动，这里的原理涉及到BFC，不再赘述。</p><p>   同样请参考上一题给出的参考文章进行阅读加以理解。</p><h2 id="Q-解释下-CSS-sprites，以及你要如何在页面或网站中使用它"><a href="#Q-解释下-CSS-sprites，以及你要如何在页面或网站中使用它" class="headerlink" title="Q: 解释下 CSS sprites，以及你要如何在页面或网站中使用它?"></a>Q: 解释下 CSS sprites，以及你要如何在页面或网站中使用它?</h2><p>  A: CSS Sprites就是把网页中一些小图片整合到一张图片文件中，再利用CSS的<code>background-image</code>，<code>background- repeat</code>，<code>background-position</code>的组合进行背景定位，<code>background-position</code>可以用数字能精确的定位出背景图片的位置。可以减少http请求。</p><h2 id="Q-你最喜欢的图片替换方法是什么，你如何选择使用"><a href="#Q-你最喜欢的图片替换方法是什么，你如何选择使用" class="headerlink" title="Q: 你最喜欢的图片替换方法是什么，你如何选择使用?"></a>Q: 你最喜欢的图片替换方法是什么，你如何选择使用?</h2><p>  A:<br>    - 一些图标是使用before和after伪元素;<br>    - 还有一些使用iconfont;<br>    - 使用sprite图;<br>    - 用背景图片代替图片。</p><pre><code>举个栗子：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 class=&quot;nir&quot;&gt;[content]&lt;/h1&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.nir &#123;</span><br><span class="line">   height: 100px; /* height of replacement image */</span><br><span class="line">   padding: 0;</span><br><span class="line">   margin: 0;</span><br><span class="line">   overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.nir:before &#123;</span><br><span class="line">     content: url(image.gif);</span><br><span class="line">     display: block;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>详细可阅读：[CSS image replacement with pseudo-elements](http://nicolasgallagher.com/css-image-replacement-with-pseudo-elements/)</code></pre><h2 id="讨论CSS-hacks，条件引用或者其他。"><a href="#讨论CSS-hacks，条件引用或者其他。" class="headerlink" title="讨论CSS hacks，条件引用或者其他。"></a>讨论CSS hacks，条件引用或者其他。</h2><p>  A: CSS主要由三种方法：</p><pre><code>- 属性前缀法(即类内部Hack)：例如 IE6能识别下划线&quot;\_&quot;和星号&quot; \* &quot;，IE7能识别星号&quot; \* &quot;，但不能识别下划线&quot;\_&quot;，IE6~IE10都认识&quot;\9&quot;，但firefox前述三个都不能认识。- 选择器前缀法(即选择器Hack)：例如 IE6能识别`*html .class&#123;&#125;`，IE7能识别`*+html .class&#123;&#125;`或者`*:first-child+html .class&#123;&#125;`。- IE条件注释法(即HTML条件注释Hack)：针对所有IE(注：IE10+已经不再支持条件注释)： &lt;!--[if IE]&gt;IE浏览器显示的内容 &lt;![endif]--&gt;，针对IE6及以下版本： &lt;!--[if lt IE 6]&gt;只在IE6-显示的内容 &lt;![endif]--&gt;。这类Hack不仅对CSS生效，对写在判断语句里面的所有代码都会生效。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Css Hack&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">    #test</span><br><span class="line">    &#123;</span><br><span class="line">        width:300px;</span><br><span class="line">        height:300px;</span><br><span class="line"></span><br><span class="line">        background-color:blue;      /*firefox*/</span><br><span class="line">        background-color:red\9;      /*all ie*/</span><br><span class="line">        background-color:yellow\0;    /*ie8*/</span><br><span class="line">        +background-color:pink;        /*ie7*/</span><br><span class="line">        _background-color:orange;       /*ie6*/</span><br><span class="line">    &#125;</span><br><span class="line">    :root #test &#123; background-color:purple\9; &#125;  /*ie9*/</span><br><span class="line">    @media all and (min-width:0px)&#123; #test &#123;background-color:black\0;&#125; &#125;  /*opera*/</span><br><span class="line">    @media screen and (-webkit-min-device-pixel-ratio:0)&#123; #test &#123;background-color:gray;&#125; &#125;  /*chrome and safari*/</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;test&quot;&gt;test&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></code></pre><p>  想要更多的了解CSS hack 方面的知识可以参考：</p><pre><code>- [史上最全的CSS hack方式一览](http://blog.csdn.net/freshlover/article/details/12132801)- [史上最全的css hack](http://www.cnblogs.com/wuqiang/archive/2011/08/23/2150240.html)</code></pre><h2 id="Q-如何为有功能限制的浏览器提供网页？"><a href="#Q-如何为有功能限制的浏览器提供网页？" class="headerlink" title="Q: 如何为有功能限制的浏览器提供网页？"></a>Q: 如何为有功能限制的浏览器提供网页？</h2><ul><li>Q: 你会使用哪些技术和处理方法？</li></ul><p>   A: 功能限制的浏览器，比如 IE 低版本、手机浏览器、奇葩国内浏览器，会在很多功能上不符合 Web 标准，而应对的方式有这么几种：</p><pre><code>- 只提供符合 Web 标准的页面；- 提供另一个符合那些浏览器标准的页面(例如说移动端一套css,电脑端一套css);- 兼容：这里有两种思路，一个是渐进增强，一个优雅降级。  渐进增强的思路就是提供一个可用的原型，后来再为高级浏览器提供优化。优雅降级的思路是根据高级浏览器提供一个版本，然后有功能限制的浏览器只需要一个刚好能用的版本。当然，工作中的标准都是尽量满足设计，如果不能满足的话就尽量贴近，不得已（性能之类的问题）才会砍掉某个浏览器版本上的需求。相关技术:- Media Query- CSS hack- 条件判断 `&lt;!--[if !IE]&gt;&lt;!--&gt;除IE外都可识别 &lt;!--&lt;![endif]--&gt;`</code></pre><h2 id="有哪些的隐藏内容的方法（如果同时还要保证屏幕阅读器可用呢？）"><a href="#有哪些的隐藏内容的方法（如果同时还要保证屏幕阅读器可用呢？）" class="headerlink" title="有哪些的隐藏内容的方法（如果同时还要保证屏幕阅读器可用呢？）"></a>有哪些的隐藏内容的方法（如果同时还要保证屏幕阅读器可用呢？）</h2><p>  A: <code>display:none</code>看不见也摸不着，屏幕阅读器更会忽略其内容；而<code>visibility:hidden</code>虽然看得见但是摸不着，占据了一定的物理空间，屏幕阅读器也会忽略。如果想要在读屏设备中让这些内容可见。解决方案的基本思路都是将这些内容放到屏幕、视线意外的地方，或者就是将大小设置成 0。比如 <code>text-indent: -9999em;</code>、<code>overflow: hidden;</code>、<code>height: 0</code>。</p><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.texthidden &#123;</span><br><span class="line">  display:block;/*统一转化为块级元素*/</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  width: 0;</span><br><span class="line">  height: 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></code></pre><p>  更详细的方法可以参考这篇文章<a href="http://snook.ca/archives/html_and_css/hiding-content-for-accessibility">HIDING CONTENT FOR ACCESSIBILITY</a></p><p>  不过既然这是了读屏而优化的，那么可以用 media query 来完成，media speech 用于语音输出的读屏设备。<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@media speech &#123;</span><br><span class="line">    /* media-specify rules */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  以上转自<a href="http://witcher42.github.io/2014/06/06/what-are-the-different-ways-to-visually-hide-content-and-make-it-available-only-for-screen-readers/">Witcher42</a>给出的答案。</p><h2 id="你用过栅格系统吗？如果使用过，你最喜欢哪种？"><a href="#你用过栅格系统吗？如果使用过，你最喜欢哪种？" class="headerlink" title="你用过栅格系统吗？如果使用过，你最喜欢哪种？"></a>你用过栅格系统吗？如果使用过，你最喜欢哪种？</h2><p>  A：使用过bootstarp。易于上手，学习成本低，还能做出比较大方美观的页面。</p><p>  可阅读<a href="http://mux.baidu.com/?p=1550">栅格系统延续美学</a>。</p><ul><li><p>Q: 你用过媒体查询，或针对移动端的布局/CSS 吗？</p><p>A:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (min-width:600px) &#123;</span><br><span class="line">  nav &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 25%;</span><br><span class="line">  &#125;</span><br><span class="line">  section &#123;</span><br><span class="line">    margin-left: 25%;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@media screen and (max-width:599px) &#123;</span><br><span class="line">  nav li &#123;</span><br><span class="line">    display: inline;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  可参考：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Media_queries">CSS媒体查询</a></li><li><a href="http://www.ibm.com/developerworks/cn/web/wa-cssqueries/">使用 CSS 媒体查询创建响应式网站</a><h2 id="Q-你熟悉-SVG-样式的书写吗？"><a href="#Q-你熟悉-SVG-样式的书写吗？" class="headerlink" title="Q:你熟悉 SVG 样式的书写吗？"></a>Q:你熟悉 SVG 样式的书写吗？</h2></li></ul><p>A:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;</span><br><span class="line"> &lt;circle cx=&quot;40&quot; cy=&quot;40&quot; r=&quot;24&quot; style=&quot;stroke:#006600; fill:#00cc00&quot;/&gt;</span><br><span class="line"> &lt;text x=&quot;250&quot; y=&quot;150&quot; font-family=&quot;Verdana&quot; font-size=&quot;10px&quot; fill=&quot;blue&quot;&gt;Hello, out there&lt;/text&gt;</span><br><span class="line"> &lt;defs&gt;&lt;style type=&quot;text/css&quot;&gt; &lt;![CDATA[.sample&#123;stroke:blue;fill:#0080FF;opacity:1;&#125;]]&gt;&lt;/style&gt;&lt;/defs&gt;</span><br><span class="line"> &lt;use xlink:href=&quot;#sample1&quot; class=&quot;sample&quot;/&gt;</span><br><span class="line"> &lt;/svg&gt;</span><br></pre></td></tr></table></figure><p>教程参考: <a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial">SVG教程</a></p></li></ul><h2 id="Q-如何优化网页的打印样式？"><a href="#Q-如何优化网页的打印样式？" class="headerlink" title="Q: 如何优化网页的打印样式？"></a>Q: 如何优化网页的打印样式？</h2><p>  A:</p><p>  <code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; href=&quot;xxx.css&quot; /&gt;</code></p><p> 其中media指定的属性就是设备，显示器上就是screen，打印机则是print，电视是tv，投影仪是projection。</p><p> <code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;print&quot; href=&quot;yyy.css&quot; /&gt;</code></p><p> 但打印样式表也应有些注意事项：</p><p>  1 打印样式表中最好不要用背景图片，因为打印机不能打印CSS中的背景。如要显示图片，请使用html插入到页面中。<br>  2 最好不要使用像素作为单位，因为打印样式表要打印出来的会是实物，所以建议使用pt和cm。<br>  3 隐藏掉不必要的内容。（<code>@print div&#123;display:none;&#125;</code>）<br>  4 打印样式表中最好少用浮动属性，因为它们会消失。<br> 如果想要知道打印样式表的效果如何，直接在浏览器上选择打印预览就可以了。</p><h2 id="Q-书写高效-CSS-时会有哪些问题需要考虑？"><a href="#Q-书写高效-CSS-时会有哪些问题需要考虑？" class="headerlink" title="Q: 书写高效 CSS 时会有哪些问题需要考虑？"></a>Q: 书写高效 CSS 时会有哪些问题需要考虑？</h2><p>  A:</p><ul><li>样式是：从右向左的解析一个选择器</li><li>ID最快，Universal最慢 有四种类型的key selector，解析速度由快到慢依次是：ID、class、tag和universal</li><li>不要tag-qualify （永远不要这样做 ul#main-navigation { } ID已经是唯一的，不需要Tag来标识，这样做会让选择器变慢。）</li><li>后代选择器最糟糕（换句话说，下面这个选择器是很低效的： html body ul li a { }）</li><li>想清楚你为什么这样写</li><li>CSS3的效率问题（CSS3选择器（比如 :nth-child）能够漂亮的定位我们想要的元素，又能保证我们的CSS整洁易读。但是这些神奇的选择器会浪费很多的浏览器资源。）</li><li>我们知道#ID速度是最快的，那么我们都用ID，是不是很快。但是我们不应该为了效率而牺牲可读性和可维护性`</li></ul><p>  可参考： <a href="http://blog.jobbole.com/55067/">http://blog.jobbole.com/55067/</a></p><p>  等我重写这道题答案。=。=</p><h2 id="使用-CSS-预处理器的优缺点有哪些？-SASS，Compass，Stylus，LESS"><a href="#使用-CSS-预处理器的优缺点有哪些？-SASS，Compass，Stylus，LESS" class="headerlink" title="使用 CSS 预处理器的优缺点有哪些？(SASS，Compass，Stylus，LESS)"></a>使用 CSS 预处理器的优缺点有哪些？(SASS，Compass，Stylus，LESS)</h2><h2 id="描述下你曾经使用过的-CSS-预处理的优缺点。"><a href="#描述下你曾经使用过的-CSS-预处理的优缺点。" class="headerlink" title="描述下你曾经使用过的 CSS 预处理的优缺点。"></a>描述下你曾经使用过的 CSS 预处理的优缺点。</h2><h2 id="如果设计中使用了非标准的字体，你该如何去实现？"><a href="#如果设计中使用了非标准的字体，你该如何去实现？" class="headerlink" title="如果设计中使用了非标准的字体，你该如何去实现？"></a>如果设计中使用了非标准的字体，你该如何去实现？</h2><ul><li>Webfonts (字体服务例如：Google Webfonts，Typekit 等等。)</li></ul><h2 id="解释下浏览器是如何判断元素是否匹配某个-CSS-选择器？"><a href="#解释下浏览器是如何判断元素是否匹配某个-CSS-选择器？" class="headerlink" title="解释下浏览器是如何判断元素是否匹配某个 CSS 选择器？"></a>解释下浏览器是如何判断元素是否匹配某个 CSS 选择器？</h2><h2 id="解释一下你对盒模型的理解，以及如何在-CSS-中告诉浏览器使用不同的盒模型来渲染你的布局。"><a href="#解释一下你对盒模型的理解，以及如何在-CSS-中告诉浏览器使用不同的盒模型来渲染你的布局。" class="headerlink" title="解释一下你对盒模型的理解，以及如何在 CSS 中告诉浏览器使用不同的盒模型来渲染你的布局。"></a>解释一下你对盒模型的理解，以及如何在 CSS 中告诉浏览器使用不同的盒模型来渲染你的布局。</h2><h2 id="请解释一下-box-sizing-border-box-的作用-并且说明使用它有什么好处？"><a href="#请解释一下-box-sizing-border-box-的作用-并且说明使用它有什么好处？" class="headerlink" title="请解释一下 * { box-sizing: border-box; } 的作用, 并且说明使用它有什么好处？"></a>请解释一下 <code>* &#123; box-sizing: border-box; &#125;</code> 的作用, 并且说明使用它有什么好处？</h2><h2 id="请罗列出你所知道的-display-属性的全部值"><a href="#请罗列出你所知道的-display-属性的全部值" class="headerlink" title="请罗列出你所知道的 display 属性的全部值"></a>请罗列出你所知道的 display 属性的全部值</h2><h2 id="请解释一下-inline-和-inline-block-的区别？"><a href="#请解释一下-inline-和-inline-block-的区别？" class="headerlink" title="请解释一下 inline 和 inline-block 的区别？"></a>请解释一下 inline 和 inline-block 的区别？</h2><h2 id="请解释一下-relative、fixed、absolute-和-static-元素的区别"><a href="#请解释一下-relative、fixed、absolute-和-static-元素的区别" class="headerlink" title="请解释一下 relative、fixed、absolute 和 static 元素的区别"></a>请解释一下 relative、fixed、absolute 和 static 元素的区别</h2><h2 id="你目前在使用哪一套CSS框架，或者在产品线上使用过哪一套？-Bootstrap-PureCSS-Foundation-等等"><a href="#你目前在使用哪一套CSS框架，或者在产品线上使用过哪一套？-Bootstrap-PureCSS-Foundation-等等" class="headerlink" title="你目前在使用哪一套CSS框架，或者在产品线上使用过哪一套？(Bootstrap, PureCSS, Foundation 等等)"></a>你目前在使用哪一套CSS框架，或者在产品线上使用过哪一套？(Bootstrap, PureCSS, Foundation 等等)</h2><ul><li>如果有，请问是哪一套？如果可以，你如何改善CSS框架？</li></ul><h2 id="请问你有使用过-CSS-Flexbox-或者-Grid-specs-吗？"><a href="#请问你有使用过-CSS-Flexbox-或者-Grid-specs-吗？" class="headerlink" title="请问你有使用过 CSS Flexbox 或者 Grid specs 吗？"></a>请问你有使用过 CSS Flexbox 或者 Grid specs 吗？</h2><ul><li>如果有，请问在性能和效率的方面你是怎么看的？</li></ul><h2 id="如何居中div？如何居中一个浮动元素？"><a href="#如何居中div？如何居中一个浮动元素？" class="headerlink" title="如何居中div？如何居中一个浮动元素？"></a>如何居中div？如何居中一个浮动元素？</h2>]]></content>
      
      
      <categories>
          
          <category> 前端面试 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 语法讲解</title>
      <link href="/c81ea237.html"/>
      <url>/c81ea237.html</url>
      
        <content type="html"><![CDATA[<p>如何使用 Markdown 语法撰写文章，这篇文章能够告诉你！</p><blockquote><p>下面的文案是从 <a href="https://www.yeyi.site/">奕奕生辉 - 叶奕的空间</a> 复制的喔！我在原文的基础上做了一些修改~</p><p>推荐同时使用 <a href="https://www.typora.io/">Typora</a> 和 <a href="https://notepad-plus-plus.org/">Notepad++</a> 进行编辑。</p><blockquote><ol><li>Notepad++ 的代码高亮功能完善，看 Markdown 文件源代码的时候特别舒服。</li><li>Typora 可以实时渲染出效果，支持快速上传拖拽到窗口的图片到图床。</li><li>两款软件都非常轻便简洁。</li></ol></blockquote></blockquote><h1 id="大标题"><a href="#大标题" class="headerlink" title="大标题"></a>大标题</h1><h2 id="先让我们添加一个二级标题。"><a href="#先让我们添加一个二级标题。" class="headerlink" title="先让我们添加一个二级标题。"></a>先让我们添加一个二级标题。</h2><p>这里的部分大概就是正文了。正文之中有不少可以使用的标记，比如说<strong>加粗</strong>和<em>斜体</em>。<br>当然啦，如果你愿意，当然不是不可以<em><strong>两个一起啦</strong></em>。</p><p>当然了，还有另一种标记呢！<del>文字还可以加删除线喔</del>√ </p><h2 id="关于引用部分"><a href="#关于引用部分" class="headerlink" title="关于引用部分"></a>关于引用部分</h2><blockquote><p>引用的文字是这样放进来的。<br>这个标记有一个特点，既可以每一行加一个，也可以一次管很多行，就像这样。</p></blockquote><p>当然啦，如果一直这样没完没了下去也不好。怎么办呢？中间空一行就好了√</p><blockquote><p>多行标记的话，就像这样。<br>一行，一行，又一行。</p></blockquote><p>如果要终止，依然需要多空一行。【摊手</p><h3 id="什么？还有一层标题？"><a href="#什么？还有一层标题？" class="headerlink" title="什么？还有一层标题？"></a>什么？还有一层标题？</h3><p>是的！这里一共有 3 层标题。如果你愿意的话，也可以多加一个井号，试试看是不是有第四层。</p><h3 id="那……如果我想要列表呢？"><a href="#那……如果我想要列表呢？" class="headerlink" title="那……如果我想要列表呢？"></a>那……如果我想要列表呢？</h3><ol><li>没问题！</li><li>这几行的开头，看见了吗？这样标注的话就有列表了√</li></ol><ul><li>这个是另一种列表。</li><li>发现什么不同了吗？没错，就是关于「是否有序」（也就是说有没有序号）。</li></ul><h3 id="但是，我现在想要加个链接。"><a href="#但是，我现在想要加个链接。" class="headerlink" title="但是，我现在想要加个链接。"></a>但是，我现在想要加个链接。</h3><p><a href="https://www.baidu.com/">当然可以！你甚至能在链接文本里使用<strong>粗体</strong>和<em>斜体</em></a>。</p><p>哦？你说图片？自然是没有问题！</p><p><img src="https://file.yeyi.site/Yeyi.site/icon/Tsurumi.jpg" alt="快看这个小姐姐x"></p><p>和链接差不多的用法，链接到图片的地址，前面再加一个小感叹号！输入的「链接文字」不会显示出来，因为它们其实是描述文本，仅仅用于图片无法显示的时候。</p><p><del><strong>顺便，图片和链接功能在后台「撰写文章」的编辑器里都能非常方便地完成。</strong>至于图片怎么传上去？请试着找一下「附件」√</del></p><blockquote><p>以上这行是 <a href="http://typecho.org/">Typecho 程序</a> 的功能，<a href="https://hexo.io/">Hexo 程序</a> 似乎没有（？）</p></blockquote><p>嗯……听说你想看一看我这一段的源码？</p><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>代码较长，为您收藏</span></div>    <div class="hide-content"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 下面的文案是从 [<span class="string">奕奕生辉 - 叶奕的空间</span>](<span class="link">https://www.yeyi.site/</span>) 复制的喔！我在原文的基础上做了一些修改~</span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; 推荐同时使用 [<span class="string">Typora</span>](<span class="link">https://www.typora.io/</span>) 和 [<span class="string">Notepad++</span>](<span class="link">https://notepad-plus-plus.org/</span>) 进行编辑。</span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt;&gt; 1. Notepad++ 的代码高亮功能完善，看 Markdown 文件源代码的时候特别舒服。</span></span><br><span class="line">&gt;&gt; 2. Typora 可以实时渲染出效果，支持快速上传拖拽到窗口的图片到图床。</span><br><span class="line">&gt;&gt; 3. 两款软件都非常轻便简洁。</span><br><span class="line"></span><br><span class="line"><span class="section"># 大标题 #</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 先让我们添加一个二级标题。 ##</span></span><br><span class="line"></span><br><span class="line">这里的部分大概就是正文了。正文之中有不少可以使用的标记，比如说<span class="strong">**加粗**</span>和<span class="emphasis">*斜体*</span>。</span><br><span class="line">当然啦，如果你愿意，当然不是不可以<span class="strong">**<span class="emphasis">*两个一起啦<span class="strong">**<span class="emphasis">*。</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">当然了，还有另一种标记呢！~~文字还可以加删除线喔~~√</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">## 关于引用部分</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">&gt; 引用的文字是这样放进来的。</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">这个标记有一个特点，既可以每一行加一个，也可以一次管很多行，就像这样。</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">当然啦，如果一直这样没完没了下去也不好。怎么办呢？中间空一行就好了√</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">&gt; 多行标记的话，就像这样。</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">一行，一行，又一行。</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">如果要终止，依然需要多空一行。【摊手</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">### 什么？还有一层标题？ ###</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">是的！这里一共有 3 层标题。如果你愿意的话，也可以多加一个井号，试试看是不是有第四层。</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">### 那……如果我想要列表呢？ ###</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">1. 没问题！</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">2. 这几行的开头，看见了吗？这样标注的话就有列表了√</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">*</span> 这个是另一种列表。</span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">* 发现什么不同了吗？没错，就是关于「是否有序」（也就是说有没有序号）。</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">### 但是，我现在想要加个链接。 ###</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">[<span class="string">当然可以！你甚至能在链接文本里使用**粗体**和*斜体*</span>](<span class="link">https://www.baidu.com</span>)。</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">哦？你说图片？自然是没有问题！</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">![<span class="string">快看这个小姐姐x</span>](<span class="link">https://file.yeyi.site/Yeyi.site/icon/Tsurumi.jpg</span>)</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">和链接差不多的用法，链接到图片的地址，前面再加一个小感叹号！输入的「链接文字」不会显示出来，因为它们其实是描述文本，仅仅用于图片无法显示的时候。</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">~~<span class="strong">**顺便，图片和链接功能在后台「撰写文章」的编辑器里都能非常方便地完成。**</span>至于图片怎么传上去？请试着找一下「附件」√~~</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">&gt; 以上这行是 [<span class="string">Typecho 程序</span>](<span class="link">http://typecho.org/</span>) 的功能，[<span class="string">Hexo 程序</span>](<span class="link">https://hexo.io/</span>) 似乎没有（？）</span></span></span></span></span><br></pre></td></tr></table></figure></div></div>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 标记语言 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
